{"mappings":"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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-3cb579d7e9010a36.js","src/main.js","src/modules/GameInterface.js","src/modules/utilities.js","src/modules/Game.js","src/modules/Player.js","src/modules/FighterType.js","src/modules/AttackSkill.js","src/modules/StatusEffect.js","src/modules/FighterTypes/Rogue.js","node_modules/@parcel/runtime-js/lib/runtime-caaef2b9659efe16.js","node_modules/@parcel/runtime-js/lib/runtime-8d609fa83452c171.js","node_modules/@parcel/runtime-js/lib/runtime-2d014e8d997baaab.js","node_modules/@parcel/runtime-js/lib/runtime-354d5f50f697db03.js","node_modules/@parcel/runtime-js/lib/runtime-8033f4a6ff0306a1.js","src/modules/FighterTypes/Warrior.js","node_modules/@parcel/runtime-js/lib/runtime-20654dbc1d5ace12.js","node_modules/@parcel/runtime-js/lib/runtime-e4fe047bdd25ab01.js","node_modules/@parcel/runtime-js/lib/runtime-65edbfdc5eb1740d.js","node_modules/@parcel/runtime-js/lib/runtime-42016120292002af.js","node_modules/@parcel/runtime-js/lib/runtime-712f30ae7800b5d8.js","src/modules/FighterTypes/Mage.js","node_modules/@parcel/runtime-js/lib/runtime-9d062a083239fa35.js","node_modules/@parcel/runtime-js/lib/runtime-77143a378a6a325d.js","node_modules/@parcel/runtime-js/lib/runtime-5393e11614d901f7.js","node_modules/@parcel/runtime-js/lib/runtime-9eb0fd964601820d.js","node_modules/@parcel/runtime-js/lib/runtime-9c7b0e913b18eef7.js","node_modules/@parcel/runtime-js/lib/runtime-beaa7e7df811db5e.js","node_modules/@parcel/runtime-js/lib/runtime-100b467f5c0c6a10.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire49e2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire49e2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $cddff68ec8f98dac$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse('[\"b9Fgu\",\"index.d2df16bf.js\",\"2rjaX\",\"rogue.9418359a.png\",\"bWLzp\",\"Stab.df3f343b.png\",\"k1COE\",\"backstab.cbfe68df.png\",\"lP0AT\",\"evasion.10f00589.png\",\"s8ijN\",\"potion.9e92e676.png\",\"8Fkm7\",\"warrior.80ba110f.png\",\"e8hyb\",\"Slash.0d282c12.png\",\"jHR1N\",\"Bash.1a78b3f2.png\",\"1QK31\",\"Bonk.72d83ecb.png\",\"4HaMh\",\"smash.8dd9de83.png\",\"7godC\",\"mage.13131773.png\",\"iGLqe\",\"Rayoffrost.e225c5f0.png\",\"fbNVe\",\"Ig-miss.52bd7018.png\",\"4TmEY\",\"lightning.10a957d3.png\",\"40ao2\",\"heal.e56e2835.png\",\"bTxU9\",\"archerright.43c66f17.png\",\"cEJ60\",\"archerleft.431eb79a.png\"]'));\n\n/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Main javascript file.\r\n*/ /*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: GameInterface\r\n    Class for managing the user interface and starting the game. \r\n    Accessed through the global gameInterface object created here. \r\n*/ /*\r\n    Generic utility functions. \r\n*/ //////////////////////////////////////////////////////////////////////////////////////////////////////\n// Set content of the matching HTML element if it exists, otherwise create it. \nfunction $31b25da2f4a4d446$export$a45229d174408848(elementType, elementText, parentElement, cssClass, attributes, allowHTML) {\n    let selector = \"\";\n    if ($31b25da2f4a4d446$export$4681d16351dbb61(attributes) && $31b25da2f4a4d446$export$a6f905893761824c(attributes.id)) selector = `#${attributes.id}`;\n    else if ($31b25da2f4a4d446$export$7d558e3702f02251(cssClass)) selector = `${elementType}.${cssClass.join(\".\")}`;\n    else if ($31b25da2f4a4d446$export$a6f905893761824c(cssClass)) selector = `${elementType}.${cssClass}`;\n    else selector = elementType;\n    let targetElement = parentElement.querySelector(selector);\n    if ($31b25da2f4a4d446$export$4681d16351dbb61(targetElement, 0)) {\n        if (elementType == \"ul\" || elementType == \"ol\") {\n            targetElement.innerHTML = \"\";\n            for (const listItemText of elementText){\n                const newListItem = document.createElement(\"li\");\n                $31b25da2f4a4d446$export$375d3942de154e76(newListItem, listItemText, allowHTML);\n                targetElement.appendChild(newListItem);\n            }\n        } else $31b25da2f4a4d446$export$375d3942de154e76(targetElement, elementText, allowHTML);\n    } else targetElement = $31b25da2f4a4d446$export$ab2fe02786cfa43c(elementType, elementText, parentElement, cssClass, attributes, allowHTML);\n    return targetElement;\n}\nfunction $31b25da2f4a4d446$export$ab2fe02786cfa43c(elementType, elementText, parentElement = null, elementClass = \"\", elementAttributes = null, allowHTML = false) {\n    let newElement = document.createElement(elementType);\n    elementType = elementType.toLowerCase();\n    // Set any attributes on the element\n    if ($31b25da2f4a4d446$export$4681d16351dbb61(elementAttributes, 1)) for(const attributeName in elementAttributes)newElement.setAttribute(attributeName, elementAttributes[attributeName]);\n    // Set CSS class(es) on the element\n    $31b25da2f4a4d446$export$68a589e25833f984(newElement, elementClass);\n    // If text content is an array, check if the typs is a list or select tag\n    if ($31b25da2f4a4d446$export$7d558e3702f02251(elementText)) {\n        // If type is a list and text is an array, build list items\n        if (elementType == \"ul\" || elementType == \"ol\") for (const listItemText of elementText){\n            const newListItem = document.createElement(\"li\");\n            $31b25da2f4a4d446$export$375d3942de154e76(newListItem, listItemText, allowHTML);\n            newElement.appendChild(newListItem);\n        }\n        else if (elementType == \"select\") for (const optionItemText of elementText){\n            const [optValue, optLabel, optGroup] = optionItemText.split(\"|\");\n            const newOptionItem = document.createElement(\"option\");\n            $31b25da2f4a4d446$export$375d3942de154e76(newOptionItem, optLabel ?? optValue, allowHTML);\n            newOptionItem.value = optValue;\n            if (optGroup !== undefined) {\n                let optionGroup = newElement.querySelector(`optgroup[label=\"${optGroup}\"]`);\n                if (optionGroup === undefined || optionGroup === null) {\n                    optionGroup = document.createElement(\"optgroup\");\n                    optionGroup.label = optGroup;\n                    newElement.appendChild(optionGroup);\n                }\n                optionGroup.appendChild(newOptionItem);\n            } else newElement.appendChild(newOptionItem);\n        }\n        else $31b25da2f4a4d446$export$375d3942de154e76(newElement, elementText[0], allowHTML);\n    } else if ($31b25da2f4a4d446$export$a6f905893761824c(elementText, 1)) {\n        // Special case for images - set ALT attribute\n        if (elementType == \"img\") newElement.alt = elementText;\n        else if (elementType == \"input\" && elementText.length > 0) {\n            const actualNewElement = newElement;\n            const newElementLabel = document.createElement(\"label\");\n            newElement = document.createElement(\"div\");\n            newElement.id = `${actualNewElement.id}-wrapper`;\n            if (elementClass.length > 0) newElement.classList.add((Array.isArray(elementClass) ? elementClass[0] : elementClass) + \"-wrapper\");\n            newElementLabel.setAttribute(\"for\", actualNewElement.id);\n            $31b25da2f4a4d446$export$375d3942de154e76(newElementLabel, elementText, allowHTML);\n            if (actualNewElement.getAttribute(\"type\") == \"radio\" || actualNewElement.getAttribute(\"type\") == \"checkbox\") {\n                newElementLabel.classList.add(`input-box-label`);\n                newElement.append(actualNewElement, newElementLabel);\n            } else newElement.append(newElementLabel, actualNewElement);\n        } else $31b25da2f4a4d446$export$375d3942de154e76(newElement, elementText, allowHTML);\n    }\n    // Append to parent, if set\n    if (parentElement !== undefined && parentElement !== null) parentElement.appendChild(newElement);\n    return newElement;\n}\nfunction $31b25da2f4a4d446$export$375d3942de154e76(element, content, allowHTML) {\n    if (allowHTML) element.innerHTML = content;\n    else element.innerText = content;\n}\nfunction $31b25da2f4a4d446$export$68a589e25833f984(targetElement, classesToAdd) {\n    if (targetElement !== undefined && targetElement !== null) {\n        if (classesToAdd.length > 0) {\n            if (Array.isArray(classesToAdd)) targetElement.classList.add(...classesToAdd);\n            else if ($31b25da2f4a4d446$export$a6f905893761824c(classesToAdd)) targetElement.classList.add(classesToAdd);\n        }\n    }\n}\nfunction $31b25da2f4a4d446$export$a6f905893761824c(text, lengthLimit = 1) {\n    return text !== undefined && text !== null && text.length !== undefined && text.length >= lengthLimit;\n}\nfunction $31b25da2f4a4d446$export$4aef7de70321e0b6(number) {\n    return number !== undefined && number !== null && !isNaN(number);\n}\nfunction $31b25da2f4a4d446$export$7d558e3702f02251(arr, lengthLimit = 1) {\n    return arr !== undefined && arr !== null && Array.isArray(arr) && arr.length !== undefined && arr.length >= lengthLimit;\n}\nfunction $31b25da2f4a4d446$export$4681d16351dbb61(obj, requiredProperties = 1) {\n    return obj !== undefined && obj !== null && typeof obj == \"object\" && Object.keys(obj).length >= requiredProperties;\n}\n\n\n/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: Game\r\n    Logic for controlling a match of the game. \r\n*/ \n/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: Player\r\n    Defines a player in the game, with their game state and choice of name and fighter-type.\r\n*/ /*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: FighterType\r\n    Definition of a type of fighter (i.e. Warrior, Mage, Rogue etc)\r\n    Abstract, do not create objects of this class, use one of its subclasses in FighterTypes instead. \r\n*/ /*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: AttackSkill\r\n    Defines a type of skill or attack move a player can use (i.e. Firebolt, Stab, Heal etc)\r\n*/ \nclass $bdc24d20efe2218e$export$2e2bcd8739ae039 {\n    // Static lookup table for checking valid status effect types a skill may apply. \n    static statusEffects = [\n        \"none\",\n        \"heal\",\n        \"cure\",\n        \"evade\",\n        \"burn\",\n        \"stun\",\n        \"riposte\"\n    ];\n    #skillName;\n    #skillDamageMin;\n    #skillDamageMax;\n    #skillUses;\n    #skillTarget;\n    #skillHitChance = 10;\n    #skillIcon;\n    #skillDescription;\n    #skillStatus = \"none\";\n    #skillStatusDuration = 0;\n    ///////////////////////////////////////////////////////////////////////////////\n    // Set the name, damage range, number of uses and target of this skill\n    constructor(name, damageMin, damageMax, hitChance = 10, charges = -1, target = \"enemy\", statusEffect = \"none\", icon = \"skill.png\", description = \"\"){\n        this.#skillName = name;\n        this.#skillDamageMin = damageMin;\n        this.#skillDamageMax = damageMax;\n        this.#skillIcon = icon;\n        this.#skillDescription = description;\n        const [statusEffectType, statusEffectDuration] = statusEffect.split(\"|\");\n        if ($bdc24d20efe2218e$export$2e2bcd8739ae039.statusEffects.includes(statusEffectType)) {\n            this.#skillStatus = statusEffectType;\n            this.#skillStatusDuration = statusEffectDuration ?? 0;\n        }\n        // Attack bonus of this skill\n        if (hitChance >= 0 && hitChance <= 20) this.#skillHitChance = hitChance;\n        // cap uses per match to between 1 - 10 (except -1 = unlimited uses)\n        this.#skillUses = charges === -1 ? -1 : Math.max(1, Math.min(charges, 10));\n        // skill targets either the player or the opponent (self-targeted are assumed to be beneficial)\n        this.#skillTarget = target !== \"self\" ? \"enemy\" : \"self\";\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the lower range of the skill damage\n    get minDamage() {\n        return this.#skillDamageMin;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the upper range of the skill damage\n    get maxDamage() {\n        return this.#skillDamageMax;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the name of the skill\n    get name() {\n        return this.#skillName;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the target type of the skill, either: \"self\" or \"enemy\"\n    get target() {\n        return this.#skillTarget;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the number of uses left of this skill\n    get uses() {\n        return this.#skillUses;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return its type if this skill inflicts any kind of status effect.\n    get status() {\n        return this.#skillStatus;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the duration of the status effect inflicted by the this skill, if any. \n    get statusDuration() {\n        return this.#skillStatusDuration;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the attack bonus modifier of this skill (0-20)\n    get hitChance() {\n        return this.#skillHitChance;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the filename of the icon for this skill\n    get icon() {\n        return this.#skillIcon;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the skill description\n    get description() {\n        return this.#skillDescription;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Use the skill, decreasing number of available uses and returning rolled damage/healing\n    use(opponent, skillUser) {\n        if (this.#skillUses != -1 && this.#skillUses <= 0) throw new Error(`You cannot use ${this.#skillName} any more times during this match.`);\n        let skillRoll = Math.round((this.#skillDamageMax - this.#skillDamageMin) * Math.random()) + this.#skillDamageMin;\n        if (this.#skillUses != -1) this.#skillUses--;\n        // Skill is self-targeted\n        if (this.target == \"self\") {\n            if (this.status == \"heal\" || this.status == \"cure\") {\n                skillUser.heal(skillRoll);\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${skillUser.name} healed themselves for ${skillRoll} health.`);\n            }\n            if (this.status == \"cure\") {\n                if (skillUser.removeStatusEffect(\"burn\")) (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${skillUser.name} cured themselves of burning.`);\n            }\n            // Apply status effect\n            if (this.status != \"none\" && this.statusDuration > 0) skillUser.addStatusEffect(this.status, this.statusDuration);\n        } else {\n            const attackRoll = this.#rollDice(20, this.hitChance);\n            const defenseRoll = this.#rollDice(20, opponent.armor);\n            if (attackRoll >= defenseRoll) {\n                opponent.takeDamage(skillRoll);\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${skillUser.name} attacked ${opponent.name} with ${this.name} for ${skillRoll} damage. (${attackRoll} vs. ${defenseRoll})`);\n                // Apply status effect\n                if (this.status == \"riposte\" && this.statusDuration > 0) skillUser.addStatusEffect(this.status, this.statusDuration);\n                else if (this.status != \"none\" && this.statusDuration > 0) opponent.addStatusEffect(this.status, this.statusDuration);\n                if (opponent.hasStatusEffect(\"riposte\")) {\n                    skillUser.takeDamage(15);\n                    (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${opponent.name} riposted ${skillUser.name}'s attack dealing 15 damage in return.`);\n                }\n            } else {\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${skillUser.name} attacked ${opponent.name} with ${this.name} but missed! (${attackRoll} vs. ${defenseRoll})`);\n                skillRoll = null;\n            }\n        }\n        return skillRoll;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Roll and return a random number with an added modifier value\n    #rollDice(sides, modifier) {\n        return Math.ceil(Math.random() * sides) + modifier;\n    }\n}\n\n\nclass $f2151051f06bd209$export$2e2bcd8739ae039 {\n    #fighterName;\n    #maxHealth = 800;\n    #armorClass = 10;\n    #attackTypes = [];\n    #classStyle;\n    #classIcon;\n    constructor(fighterName, maxHealth, armorClass, style, icon){\n        this.name = fighterName;\n        this.#maxHealth = maxHealth;\n        this.#armorClass = armorClass;\n        this.#classStyle = style;\n        this.#classIcon = icon;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Change the name of this fighter type\n    set name(fighterName) {\n        if (typeof fighterName !== \"string\" || fighterName.length < 2 || fighterName.length > 20) throw new Error(\"The name of a fighter type must be a string between 2 and 20 characters in length.\");\n        this.#fighterName = fighterName;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the name of this fighter type\n    get name() {\n        return this.#fighterName;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the armor class of this fighter type\n    get armor() {\n        return this.#armorClass;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the health pool size of this fighter type\n    get maxHealth() {\n        return this.#maxHealth;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the icon for this class\n    get icon() {\n        return this.#classIcon;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the color for this class\n    get style() {\n        return this.#classStyle;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    addSkill(attackType) {\n        if (typeof attackType !== \"object\" || !(attackType instanceof (0, $bdc24d20efe2218e$export$2e2bcd8739ae039))) throw new Error(`Error attempting to add invalid skill to ${this.#fighterName}!`);\n        if (!this.#attackTypes.includes(attackType)) this.#attackTypes.push(attackType);\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the attack or skill with the specified name\n    getAttackSkill(skillName) {\n        for (const skill of this.#attackTypes){\n            if (skill.name == skillName) return skill;\n        }\n        throw new Error(`The ${this.#fighterName} does not know the ${skillName} skill.`);\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return a list of skills available to use.\n    getAvailableSkills() {\n        if (this.#attackTypes.length <= 0) throw new Error(`The ${this.#fighterName} does not have any skills assigned!`);\n        return this.#attackTypes.filter(({ uses: uses })=>uses > 0 || uses === -1);\n    }\n}\n\n\n/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: StatusEffect\r\n    Class for defining a status effect applied to a player, either beneficial or detrimental. \r\n    Valid status effect types are:\r\n    'heal'      - instant heal + health regen over time: 10 health/round\r\n    'cure'      - instant heal + cure burning\r\n    'evade'     - +15 defense bonus\r\n    'burn'      - Damage over time: 10 damage/round\r\n    'stun'      - Affected player skips their turn\r\n    'riposte'   - Retaliate against incoming attacks, dealing 15 damage\r\n*/ \nclass $0b08f7e0ded088ea$export$2e2bcd8739ae039 {\n    #effectType;\n    #effectDuration;\n    #effectTarget;\n    constructor(effectType, duration, target){\n        this.#effectDuration = duration;\n        this.#effectType = effectType;\n        this.#effectTarget = target;\n        this.#showFeedback();\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the number of rounds until this status effect expires\n    get duration() {\n        return this.#effectDuration;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return the type of this status effect, one of Attackskill.statusEffects\n    get effectType() {\n        return this.#effectType;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Return a display name of the type of status effect\n    get effectName() {\n        return $0b08f7e0ded088ea$export$2e2bcd8739ae039.getEffectName(this.effectType);\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Get string representation / name of an effect type\n    // Static to allow general type to name lookup outside of StatusEffect objects. \n    static getEffectName(effectType) {\n        switch(effectType){\n            case \"heal\":\n                return \"Health regen\";\n            case \"cure\":\n                return \"Healing\";\n            case \"evade\":\n                return \"Evading\";\n            case \"burn\":\n                return \"Burning\";\n            case \"stun\":\n                return \"Stunned\";\n            case \"riposte\":\n                return \"Riposting\";\n        }\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Do round update for the status effect. Decrease remaining duration and\n    // apply any effects that tick per turn. \n    turnProc() {\n        if (this.#effectDuration > 0) {\n            this.#effectDuration--;\n            switch(this.effectType){\n                case \"burn\":\n                    this.#effectTarget.takeDamage(10);\n                    (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${this.#effectTarget.name} takes 10 damage from burning.`);\n                    break;\n                case \"heal\":\n                    this.#effectTarget.heal(10);\n                    (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${this.#effectTarget.name} regenerates 10 health.`);\n                    break;\n            }\n        }\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Show a feedback message when the status effect is applied. \n    #showFeedback() {\n        switch(this.effectType){\n            case \"heal\":\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${this.#effectTarget.name} is regenerating health for ${this.#effectDuration} rounds!`);\n                break;\n            case \"evade\":\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${this.#effectTarget.name} is evading attacks (+5 defense) for ${this.#effectDuration} rounds!`);\n                break;\n            case \"burn\":\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${this.#effectTarget.name} is burning for ${this.#effectDuration} rounds!`);\n                break;\n            case \"stun\":\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${this.#effectTarget.name} is stunned for ${this.#effectDuration} rounds!`);\n                break;\n            case \"riposte\":\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${this.#effectTarget.name} is riposting attacks for ${this.#effectDuration} rounds!`);\n                break;\n        }\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Show a feedback message when the status effect is expiring or removed. \n    expireMessage() {\n        switch(this.effectType){\n            case \"heal\":\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${this.#effectTarget.name} stopped regenerating health.`);\n                break;\n            case \"evade\":\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${this.#effectTarget.name} stopped evading attacks.`);\n                break;\n            case \"burn\":\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${this.#effectTarget.name} is no longer burning.`);\n                break;\n            case \"stun\":\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${this.#effectTarget.name} recovered from stun.`);\n                break;\n            case \"riposte\":\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`${this.#effectTarget.name} stopped riposting attacks.`);\n                break;\n        }\n    }\n}\n\n\n\nclass $c5c895184b095f06$export$2e2bcd8739ae039 {\n    #playerId;\n    #playerName;\n    #currentHealth;\n    #fighterType;\n    #statusEffects;\n    #combatRound;\n    constructor(playerName, fighterType){\n        if (typeof fighterType !== \"object\" || !(fighterType instanceof (0, $f2151051f06bd209$export$2e2bcd8739ae039))) throw new Error(\"Invalid fighter type specified!\");\n        this.name = playerName;\n        this.#fighterType = fighterType;\n        this.#currentHealth = this.#fighterType.maxHealth;\n        this.#statusEffects = [];\n        this.#combatRound = 0;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Get ID of the player\n    get id() {\n        return this.#playerId;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Set the ID of the player\n    set id(newID) {\n        if (newID == 1 || newID == 2) this.#playerId = newID;\n        else throw new Error(\"The player ID must be either 1 or 2.\");\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Get the name of the player\n    get name() {\n        return this.#playerName;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Change the name of the player\n    set name(newName) {\n        if (typeof newName !== \"string\" || newName.length < 2 || newName.length > 20) throw new Error(\"The player name must be a string between 2 and 20 characters in length.\");\n        this.#playerName = newName;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Get the current health of the player\n    get health() {\n        return this.#currentHealth;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Get the size of the health pool of the player (depends on chosen fighter type)\n    get maxHealth() {\n        return this.#fighterType.maxHealth;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Get the class/fighter type of the player\n    get type() {\n        return this.#fighterType;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Get the effective defense bonus value of the player\n    get armor() {\n        return this.type.armor + (this.hasStatusEffect(\"evade\") ? 15 : 0);\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Get the value of the combat round counter for the player\n    get round() {\n        return this.#combatRound;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Increment the combat round counter of the player\n    incrementRound() {\n        this.#combatRound++;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Damage the player by the specified amount (capped at 0)\n    takeDamage(damageAmount) {\n        if (typeof damageAmount === \"string\") damageAmount = parseInt(damageAmount);\n        if (damageAmount > 0) {\n            damageAmount = Math.min(damageAmount, this.#currentHealth);\n            this.#currentHealth -= damageAmount;\n        }\n        return damageAmount;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Heal the player the specified amount (capped at the health pool size)\n    heal(healAmount) {\n        if (typeof healAmount === \"string\") healAmount = parseInt(healAmount);\n        if (healAmount > 0) {\n            healAmount = this.#currentHealth + healAmount > this.type.maxHealth ? this.type.maxHealth - this.#currentHealth : healAmount;\n            this.#currentHealth += healAmount;\n        }\n        return healAmount;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Apply a status effect to the player\n    addStatusEffect(effectType, duration) {\n        if ((0, $bdc24d20efe2218e$export$2e2bcd8739ae039).statusEffects.includes(effectType) && duration > 0) this.#statusEffects.push(new (0, $0b08f7e0ded088ea$export$2e2bcd8739ae039)(effectType, duration, this));\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Remove a status effect from the player\n    removeStatusEffect(effectType) {\n        let removeCount = 0;\n        if ((0, $bdc24d20efe2218e$export$2e2bcd8739ae039).statusEffects.includes(effectType)) {\n            const updatedStatusList = [];\n            for (const status of this.#statusEffects)if (status.effectType != effectType) updatedStatusList.push(status);\n            else {\n                removeCount++;\n                status.expireMessage();\n            }\n            this.#statusEffects = updatedStatusList;\n        }\n        return removeCount;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Check if this player has a status effect of the specified type applied. \n    hasStatusEffect(effectType) {\n        for (const status of this.#statusEffects){\n            if (status.effectType == effectType) return true;\n        }\n        return false;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Get an array listing all status effects applied to the player.  \n    getStatusEffects() {\n        const statusList = [];\n        for (const status of this.#statusEffects)statusList.push(`<span class=\"status-${status.effectType}\">${status.effectName} [${parseInt(status.duration)}]</span>`);\n        return statusList;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Update duration of any status effects applied to the player and proc \n    // effects that apply per round. \n    updateStatusEffects() {\n        const updatedStatusList = [];\n        for(let i = 0; i < this.#statusEffects.length; i++){\n            const status = this.#statusEffects[i];\n            status.turnProc();\n            if (status.duration > 0) updatedStatusList.push(status);\n            else status.expireMessage();\n        }\n        this.#statusEffects = updatedStatusList;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Make the player use the skill with the specified name\n    useSkill(attackSkill, opponentPlayer) {\n        const skillObj = this.type.getAttackSkill(attackSkill);\n        if (skillObj === undefined || skillObj === null) throw new Error(`The skill ${attackSkill} is not known to a ${this.type}!`);\n        const skillDmg = skillObj.use(opponentPlayer, this);\n        return {\n            roll: skillDmg,\n            skill: skillObj\n        };\n    }\n}\n\n\n\nclass $9671fb645043bee3$export$2e2bcd8739ae039 {\n    #gameRound = 0;\n    #currentPlayer;\n    #playerOne;\n    #playerTwo;\n    constructor(player1, player2){\n        if (!(player1 instanceof (0, $c5c895184b095f06$export$2e2bcd8739ae039)) || !(player2 instanceof (0, $c5c895184b095f06$export$2e2bcd8739ae039))) throw new Error(\"Invalid player encountered, unable to start match.\");\n        this.#playerOne = player1;\n        this.#playerTwo = player2;\n        this.#playerOne.id = 1;\n        this.#playerTwo.id = 2;\n        (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).setPlayerColor(1, this.#playerOne.type.style);\n        (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).setPlayerColor(2, this.#playerTwo.type.style);\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Get the player currently taking their turn\n    get player() {\n        return this.#currentPlayer;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Get the player currently waiting for their turn\n    get opponent() {\n        return this.#currentPlayer === this.#playerOne ? this.#playerTwo : this.#playerOne;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Update the game for a turn, passing control to the next player\n    nextPlayerTurn() {\n        // End game if anyone has gotten KO'd\n        if (this.checkForGameOver()) return;\n        // Increase round counter once both players have taken their turn. \n        if (this.#playerOne.round === this.#playerTwo.round) this.#gameRound++;\n        // Pass control to next player\n        this.#currentPlayer = this.opponent;\n        this.#currentPlayer.incrementRound();\n        // Skip this turn if the player is stunned\n        if (this.#currentPlayer.hasStatusEffect(\"stun\")) {\n            (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`<strong>Round ${this.#gameRound}:</strong> ${this.#currentPlayer.name} is stunned, skipping turn!`);\n            this.#currentPlayer.updateStatusEffects();\n            this.nextPlayerTurn();\n            return;\n        }\n        (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`<strong>Round ${this.#gameRound}:</strong> ${this.#currentPlayer.name}'s turn!`);\n        (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).setCurrentPlayer(this.#currentPlayer.id);\n        // Process status effects\n        this.#currentPlayer.updateStatusEffects();\n        // Update displayed player info\n        this.#buildPlayerAvatar(this.#playerOne);\n        this.#buildPlayerAvatar(this.#playerTwo);\n        // Game over if anyone is KO'd\n        this.checkForGameOver();\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Check if either player has been knocked out.\n    checkForGameOver() {\n        if (this.#playerOne.health <= 0) {\n            this.#doGameOver(this.#playerTwo, this.#playerOne);\n            return true;\n        }\n        if (this.#playerTwo.health <= 0) {\n            this.#doGameOver(this.#playerOne, this.#playerTwo);\n            return true;\n        }\n        return false;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Someone got knocked out? Show the Game Over box.\n    #doGameOver(winner, loser) {\n        this.#gameRound = 0;\n        this.#currentPlayer = null;\n        (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showMessage(`<strong>GAME OVER:</strong> ${loser.name} is knocked out, ${winner.name} wins!`);\n        (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showGameOverScreen(winner.name);\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Build/update the player info elements on the page\n    #buildPlayerAvatar(player) {\n        const outputElement = (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).getPlayerElement(player.id);\n        // Update elements if they exist, otherwise create them. \n        (0, $31b25da2f4a4d446$export$a45229d174408848)(\"div\", player.name, outputElement, \"player-name\", {\n            id: `player-${player.id}-name`\n        });\n        (0, $31b25da2f4a4d446$export$a45229d174408848)(\"div\", `<span>Class:</span> ${player.type.name}`, outputElement, \"player-class\", {\n            id: `player-${player.id}-class`\n        }, true);\n        (0, $31b25da2f4a4d446$export$a45229d174408848)(\"div\", `<span>Health:</span> ${player.health} / ${player.maxHealth}`, outputElement, \"player-health\", {\n            id: `player-${player.id}-health`\n        }, true);\n        (0, $31b25da2f4a4d446$export$a45229d174408848)(\"div\", `<span>Defense:</span> ${player.armor}`, outputElement, \"player-defense\", {\n            id: `player-${player.id}-defense`\n        }, true);\n        (0, $31b25da2f4a4d446$export$a45229d174408848)(\"ul\", player.getStatusEffects(), outputElement, \"player-effects\", {\n            id: `player-${player.id}-effects`\n        }, true);\n        (0, $31b25da2f4a4d446$export$a45229d174408848)(\"img\", \"Player avatar\", outputElement, \"avatar-icon\", {\n            src: `${player.type.icon}`\n        });\n        // Build buttons for available skills\n        this.#buildSkillButtons(player);\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Build the buttons with the player's available skills\n    #buildSkillButtons(player) {\n        const playerSkills = player.type.getAvailableSkills();\n        const outputElement = (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).getPlayerElement(player.id);\n        let buttonContainer = outputElement.querySelector(\".skill-buttons\");\n        let buttonWrapper;\n        // If the skill button form does not exist, create it, otherwise use existing one.\n        if (buttonContainer === undefined || buttonContainer === null) {\n            buttonContainer = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"form\", \"\", outputElement, \"skill-buttons\", {\n                id: `player-${player.id}-skills`\n            });\n            buttonWrapper = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"fieldset\", \"\", buttonContainer, \"skill-button-wrapper\");\n            // Event handler for when the player clicks a skill button.\n            buttonContainer.addEventListener(\"submit\", (event)=>{\n                event.preventDefault();\n                const usedSkill = event.submitter.getAttribute(\"skillname\");\n                const skillResult = this.player.useSkill(usedSkill, this.opponent);\n                (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showPlayerMove(this.player, this.opponent, usedSkill, skillResult);\n            });\n        } else buttonWrapper = buttonContainer.querySelector(\".skill-button-wrapper\");\n        buttonWrapper.innerHTML = \"\";\n        // Disable the buttons for the player not taking this turn\n        buttonWrapper.disabled = player == this.#currentPlayer ? false : true;\n        // Create a button for each skill the player has available to use.\n        for (const skill of playerSkills){\n            const buttonId = \"player-\" + player.id + \"-\" + skill.name.toLowerCase().replaceAll(\" \", \"-\");\n            // If the skill has limited uses per match, show remaining uses on the buton.\n            const buttonLabel = `<img src=\"${skill.icon}\">` + (skill.uses === -1 ? skill.name : `${skill.name} (${skill.uses})`);\n            (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"button\", buttonLabel, buttonWrapper, \"player-skill\", {\n                id: buttonId,\n                skillname: skill.name\n            }, true);\n            (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", skill.description, buttonWrapper, \"player-skill-tooltip\");\n        }\n    }\n}\n\n\n\n/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: FighterType -> Rogue\r\n    Definition of stats and skills for a player of the rogue class.\r\n*/ \n\nvar $f9a6e3a1144815c5$exports = {};\n$f9a6e3a1144815c5$exports = new URL(\"rogue.9418359a.png\", import.meta.url).toString();\n\n\nvar $1fc58a0afe1e72af$exports = {};\n$1fc58a0afe1e72af$exports = new URL(\"Stab.df3f343b.png\", import.meta.url).toString();\n\n\nvar $2e670a262a06ebba$exports = {};\n$2e670a262a06ebba$exports = new URL(\"backstab.cbfe68df.png\", import.meta.url).toString();\n\n\nvar $dc09a6f8c8add74b$exports = {};\n$dc09a6f8c8add74b$exports = new URL(\"evasion.10f00589.png\", import.meta.url).toString();\n\n\nvar $4f7acee141176343$exports = {};\n$4f7acee141176343$exports = new URL(\"potion.9e92e676.png\", import.meta.url).toString();\n\n\nclass $c6b4512f0e8a72f5$export$2e2bcd8739ae039 extends (0, $f2151051f06bd209$export$2e2bcd8739ae039) {\n    constructor(){\n        // name, health, defense, color, icon\n        super(\"Rogue\", 300, 4, \"fighterclass-rogue\", (0, (/*@__PURE__*/$parcel$interopDefault($f9a6e3a1144815c5$exports))));\n        // Create unique skills for this fighter type\n        this.addSkill(new (0, $bdc24d20efe2218e$export$2e2bcd8739ae039)(\"Stab\", 5, 15, 15, -1, \"enemy\", \"none\", (0, (/*@__PURE__*/$parcel$interopDefault($1fc58a0afe1e72af$exports))), \"Stab opponent for 5-15 damage. (+15 attack)\"));\n        this.addSkill(new (0, $bdc24d20efe2218e$export$2e2bcd8739ae039)(\"Backstab\", 40, 70, 10, 5, \"enemy\", \"riposte|1\", (0, (/*@__PURE__*/$parcel$interopDefault($2e670a262a06ebba$exports))), \"Backstab opponent for 30-60 damage and riposte incoming attacks for 1 turn, retaliating for 15 damage. (+10 attack)\"));\n        this.addSkill(new (0, $bdc24d20efe2218e$export$2e2bcd8739ae039)(\"Evasion\", 0, 0, 0, 3, \"self\", \"evade|3\", (0, (/*@__PURE__*/$parcel$interopDefault($dc09a6f8c8add74b$exports))), \"Evade attacks for three rounds (+15 defense).\"));\n        this.addSkill(new (0, $bdc24d20efe2218e$export$2e2bcd8739ae039)(\"Potion\", 30, 35, 10, 3, \"self\", \"heal|2\", (0, (/*@__PURE__*/$parcel$interopDefault($4f7acee141176343$exports))), \"Heal yourself for 30-35 health and regen 10 health for 2 rounds.\"));\n    }\n}\n\n\n/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: FighterType -> Warrior\r\n    Definition of stats and skills for a player of the warrior class.\r\n*/ \n\nvar $6d7ce8bbb7925143$exports = {};\n$6d7ce8bbb7925143$exports = new URL(\"warrior.80ba110f.png\", import.meta.url).toString();\n\n\nvar $eca931ac28e7e465$exports = {};\n$eca931ac28e7e465$exports = new URL(\"Slash.0d282c12.png\", import.meta.url).toString();\n\n\nvar $02a717f98ddc67da$exports = {};\n$02a717f98ddc67da$exports = new URL(\"Bash.1a78b3f2.png\", import.meta.url).toString();\n\n\nvar $5c8f4a440fc73749$exports = {};\n$5c8f4a440fc73749$exports = new URL(\"Bonk.72d83ecb.png\", import.meta.url).toString();\n\n\nvar $97f6336e7d8b2cfb$exports = {};\n$97f6336e7d8b2cfb$exports = new URL(\"smash.8dd9de83.png\", import.meta.url).toString();\n\n\nclass $d51fd8bc5f27a2d0$export$2e2bcd8739ae039 extends (0, $f2151051f06bd209$export$2e2bcd8739ae039) {\n    constructor(){\n        // name, health, defense, color, icon\n        super(\"Warrior\", 400, 5, \"fighterclass-warrior\", (0, (/*@__PURE__*/$parcel$interopDefault($6d7ce8bbb7925143$exports))));\n        // Create unique skills for this fighter type\n        this.addSkill(new (0, $bdc24d20efe2218e$export$2e2bcd8739ae039)(\"Slash\", 10, 15, 15, -1, \"enemy\", \"none\", (0, (/*@__PURE__*/$parcel$interopDefault($eca931ac28e7e465$exports))), \"Slash opponent for 10-15 damage. (+15 attack)\"));\n        this.addSkill(new (0, $bdc24d20efe2218e$export$2e2bcd8739ae039)(\"Bash\", 5, 40, 10, -1, \"enemy\", \"none\", (0, (/*@__PURE__*/$parcel$interopDefault($02a717f98ddc67da$exports))), \"Bash opponent for 5-40 damage. (+10 attack)\"));\n        this.addSkill(new (0, $bdc24d20efe2218e$export$2e2bcd8739ae039)(\"Bonk!\", 15, 20, 10, 3, \"enemy\", \"stun|1\", (0, (/*@__PURE__*/$parcel$interopDefault($5c8f4a440fc73749$exports))), \"Bonk opponent on the head for 15-20 damage, stunning them for 1 round. (+10 attack)\"));\n        this.addSkill(new (0, $bdc24d20efe2218e$export$2e2bcd8739ae039)(\"Flame blade\", 50, 50, 5, 3, \"enemy\", \"burn|2\", (0, (/*@__PURE__*/$parcel$interopDefault($97f6336e7d8b2cfb$exports))), \"Hit opponent with a flaming blade for 50 damage and inflict burn for 2 rounds. (+5 attack)\"));\n    }\n}\n\n\n/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: FighterType -> Mage\r\n    Definition of stats and skills for a player of the mage class.\r\n*/ \n\nvar $fe0bd94cadab826a$exports = {};\n$fe0bd94cadab826a$exports = new URL(\"mage.13131773.png\", import.meta.url).toString();\n\n\nvar $f21115f4243e71cb$exports = {};\n$f21115f4243e71cb$exports = new URL(\"Rayoffrost.e225c5f0.png\", import.meta.url).toString();\n\n\nvar $8b4a35d0a8c455e6$exports = {};\n$8b4a35d0a8c455e6$exports = new URL(\"Ig-miss.52bd7018.png\", import.meta.url).toString();\n\n\nvar $3be5bf08676dfafc$exports = {};\n$3be5bf08676dfafc$exports = new URL(\"lightning.10a957d3.png\", import.meta.url).toString();\n\n\nvar $b6b8815555194c56$exports = {};\n$b6b8815555194c56$exports = new URL(\"heal.e56e2835.png\", import.meta.url).toString();\n\n\nclass $8296058d3c480b30$export$2e2bcd8739ae039 extends (0, $f2151051f06bd209$export$2e2bcd8739ae039) {\n    constructor(){\n        // name, health, defense, color, icon\n        super(\"Wizard\", 200, 3, \"fighterclass-mage\", (0, (/*@__PURE__*/$parcel$interopDefault($fe0bd94cadab826a$exports))));\n        // Create unique skills for this fighter type\n        this.addSkill(new (0, $bdc24d20efe2218e$export$2e2bcd8739ae039)(\"Ray of Frost\", 10, 15, 15, -1, \"enemy\", \"none\", (0, (/*@__PURE__*/$parcel$interopDefault($f21115f4243e71cb$exports))), \"Freeze opponent with a ray of frost doing 10-15 damage. (+15 attack)\"));\n        this.addSkill(new (0, $bdc24d20efe2218e$export$2e2bcd8739ae039)(\"Ig-miss\", 35, 40, 10, 6, \"enemy\", \"burn|3\", (0, (/*@__PURE__*/$parcel$interopDefault($8b4a35d0a8c455e6$exports))), \"Attempt to scorch opponent for 35-40 damage with a firebolt, burning for 10 damage over 3 rounds. (+5 attack)\"));\n        this.addSkill(new (0, $bdc24d20efe2218e$export$2e2bcd8739ae039)(\"Lightning\", 50, 60, 10, 3, \"enemy\", \"stun|1\", (0, (/*@__PURE__*/$parcel$interopDefault($3be5bf08676dfafc$exports))), \"Electrocute opponent with a lightning bolt for 50-60 damage, stunning for 1 round. (+10 attack)\"));\n        this.addSkill(new (0, $bdc24d20efe2218e$export$2e2bcd8739ae039)(\"Heal\", 50, 50, 10, 3, \"self\", \"cure\", (0, (/*@__PURE__*/$parcel$interopDefault($b6b8815555194c56$exports))), \"Heal yourself for 50 health and cure burning.\"));\n    }\n}\n\n\n\n\n\n\nvar $089d7c0f682e5855$exports = {};\n$089d7c0f682e5855$exports = new URL(\"archerright.43c66f17.png\", import.meta.url).toString();\n\n\nvar $8db4d3a4ecc9a9a5$exports = {};\n$8db4d3a4ecc9a9a5$exports = new URL(\"archerleft.431eb79a.png\", import.meta.url).toString();\n\n\nclass $70a8fd96a77f4374$var$GameInterface {\n    #game;\n    #parentElement;\n    #messagesElement;\n    #errorsElement;\n    #playerElements;\n    #playerOne;\n    #playerTwo;\n    #playerIndicator;\n    constructor(parentElement){\n        this.#parentElement = parentElement;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Build the main game interface and start the match.\n    startGame(player1, player2) {\n        this.#parentElement.innerHTML = \"\";\n        this.#playerElements = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", \"\", this.#parentElement, \"game-players\", {\n            id: \"players\"\n        });\n        this.#errorsElement = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", \"\", this.#parentElement, \"game-errors\", {\n            id: \"errors\"\n        });\n        this.#messagesElement = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", \"\", this.#parentElement, \"game-messages\", {\n            id: \"messages\"\n        });\n        this.#playerOne = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", \"\", this.#playerElements, \"game-player\", {\n            id: `player-1`\n        });\n        this.#playerIndicator = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", \"\", this.#playerElements, \"game-player-indicator\", {\n            id: `player-indicator`\n        });\n        this.#playerTwo = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", \"\", this.#playerElements, \"game-player\", {\n            id: `player-2`\n        });\n        this.#game = new (0, $9671fb645043bee3$export$2e2bcd8739ae039)(new (0, $c5c895184b095f06$export$2e2bcd8739ae039)(player1.name, this.#createPlayerType(player1.type)), new (0, $c5c895184b095f06$export$2e2bcd8739ae039)(player2.name, this.#createPlayerType(player2.type)));\n        this.#game.nextPlayerTurn();\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Create fighter type class depending on type value string from form.\n    #createPlayerType(typeName) {\n        switch(typeName){\n            case \"warrior\":\n                return new (0, $d51fd8bc5f27a2d0$export$2e2bcd8739ae039)();\n            case \"rogue\":\n                return new (0, $c6b4512f0e8a72f5$export$2e2bcd8739ae039)();\n            case \"mage\":\n                return new (0, $8296058d3c480b30$export$2e2bcd8739ae039)();\n        }\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Set which player should be marked as the current/active player on the UI\n    setCurrentPlayer(playerNumber) {\n        this.#playerIndicator.innerHTML = \" \";\n        if (playerNumber == 1) {\n            (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"img\", \"Arrow\", this.#playerIndicator, \"player-indicator-archer\", {\n                src: (0, (/*@__PURE__*/$parcel$interopDefault($089d7c0f682e5855$exports)))\n            });\n            this.#playerOne.classList.add(\"activeplayer\");\n            this.#playerTwo.classList.remove(\"activeplayer\");\n        } else {\n            (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"img\", \"Arrow\", this.#playerIndicator, \"player-indicator-archer\", {\n                src: (0, (/*@__PURE__*/$parcel$interopDefault($8db4d3a4ecc9a9a5$exports)))\n            });\n            this.#playerOne.classList.remove(\"activeplayer\");\n            this.#playerTwo.classList.add(\"activeplayer\");\n        }\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Set the color of the player's avatar box (css class)\n    setPlayerColor(playerNumber, playerStyle) {\n        if (playerNumber == 1) this.#playerOne.classList.add(playerStyle);\n        else this.#playerTwo.classList.add(playerStyle);\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Get the HTML element box for the player with the specified ID\n    getPlayerElement(playerIdx) {\n        return this.#playerElements.querySelector(`#player-${playerIdx}`);\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Show a message to the player (combat log)\n    showMessage(messageText) {\n        this.#messagesElement.prepend((0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", messageText, null, \"game-message\", null, true));\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Show an error message to the player (red error box)\n    showError(errorText) {\n        const errorMsg = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", errorText, null, \"game-error\", null, true);\n        this.#errorsElement.prepend(errorMsg);\n        this.#errorsElement.classList.add(\"show\");\n        // Hide error after 10 seconds\n        setTimeout(()=>{\n            errorMsg.remove();\n            if (this.#errorsElement.children.length <= 0) this.#errorsElement.classList.remove(\"show\");\n        }, 10000);\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Visually indicate the player's action between the avatar boxes\n    showPlayerMove(player, opponent, skillName, skillResult) {\n        // Disable buttons for both players while the action is displayed... \n        document.querySelectorAll(\".skill-button-wrapper\").forEach((buttonPanel)=>{\n            buttonPanel.disabled = true;\n        });\n        // Skill icon\n        (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(`img`, skillName, this.#playerIndicator, \"feedback-skillIcon\", {\n            src: skillResult.skill.icon\n        });\n        // Damage or healing amount\n        if (skillResult.roll !== 0) (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(`p`, `${skillResult.roll !== null ? skillResult.roll : \"Miss!\"}`, this.#playerIndicator, skillResult.skill.target == \"self\" ? \"feedback-healing\" : \"feedback-damage\");\n        // Status effect, if any, if the skill hits\n        if (skillResult.roll !== null && skillResult.skill.status !== \"none\") (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", (0, $0b08f7e0ded088ea$export$2e2bcd8739ae039).getEffectName(skillResult.skill.status), this.#playerIndicator, [\n            \"feedback-statuseffect\",\n            `status-${skillResult.skill.status}`\n        ]);\n        // Pause briefly while displaying the action before continuing next player turn.\n        setTimeout(()=>{\n            this.#game.nextPlayerTurn();\n        }, 2000);\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Show the game over box, declaring the winner. \n    showGameOverScreen(winnerName) {\n        const gameoverBox = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"dialog\", \"\", document.body, \"game-over\", {\n            id: \"gameover\"\n        });\n        (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"h2\", \"Game Over!\", gameoverBox, \"game-over-title\", {\n            id: \"gameover-title\"\n        });\n        (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", `${winnerName} is victorious!`, gameoverBox, \"game-over-text\", {\n            id: \"gameover-text\"\n        });\n        // Button: New game\n        const restartButton = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"button\", \"Play again!\", gameoverBox, \"game-over-button\", {\n            id: \"restart-button\"\n        });\n        restartButton.addEventListener(\"click\", (event)=>{\n            gameoverBox.close();\n            gameoverBox.remove();\n            this.newGame();\n        });\n        // Button: Dismiss game over box\n        const endButton = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"button\", \"OK\", gameoverBox, \"game-over-button\", {\n            id: \"gameover-button\"\n        });\n        endButton.addEventListener(\"click\", (event)=>{\n            gameoverBox.close();\n            gameoverBox.remove();\n        });\n        gameoverBox.showModal();\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Show the new game character creation screen\n    newGame() {\n        this.#parentElement.innerHTML = \"\";\n        const newPlayersForm = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"form\", \"\", this.#parentElement, \"new-players-form\", {\n            id: \"new-players-form\"\n        });\n        const newPlayersWrapper = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", \"\", newPlayersForm, \"new-players-wrapper\", {\n            id: \"new-players-wrapper\"\n        });\n        const buttonsWrapper = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", \"\", newPlayersForm, \"start-game-button-wrapper\");\n        (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"button\", \"Start game!\", buttonsWrapper, \"start-game-button\", {\n            id: \"start-game-button\"\n        });\n        // Build boxes for both players\n        this.#createNewPlayerBox(newPlayersWrapper, \"one\");\n        this.#createNewPlayerBox(newPlayersWrapper, \"two\");\n        newPlayersForm.addEventListener(\"submit\", this.#onNewPlayersSubmit.bind(this));\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // Form component for creating a new player\n    #createNewPlayerBox(parentElement, playerNum) {\n        const newPlayerBox = (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"div\", \"\", parentElement, \"new-player-box\", {\n            id: \"new-player-\" + playerNum\n        });\n        (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"h2\", \"Player \" + (playerNum == \"one\" ? \"1\" : \"2\"), newPlayerBox, \"new-player-title\");\n        (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"input\", \"Choose your name:\", newPlayerBox, \"new-player-name\", {\n            id: `new-player-${playerNum}-name`,\n            type: \"text\",\n            minlength: \"2\",\n            maxlength: \"20\",\n            required: \"true\"\n        });\n        (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"label\", \"Choose your class:\", newPlayerBox, \"new-player-label\", {\n            for: `new-player-${playerNum}-class`\n        });\n        (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"input\", `<img src=\"${(0, (/*@__PURE__*/$parcel$interopDefault($6d7ce8bbb7925143$exports)))}\" alt=\"Warrior\"> <span>Warrior</span>`, newPlayerBox, \"new-player-class\", {\n            id: `new-player-${playerNum}-class-warrior`,\n            type: \"radio\",\n            name: `new-player-${playerNum}-class`,\n            value: \"warrior\",\n            checked: \"true\"\n        }, true);\n        (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"input\", `<img src=\"${(0, (/*@__PURE__*/$parcel$interopDefault($f9a6e3a1144815c5$exports)))}\" alt=\"Rogue\"> <span>Rogue</span>`, newPlayerBox, \"new-player-class\", {\n            id: `new-player-${playerNum}-class-rogue`,\n            type: \"radio\",\n            name: `new-player-${playerNum}-class`,\n            value: \"rogue\"\n        }, true);\n        (0, $31b25da2f4a4d446$export$ab2fe02786cfa43c)(\"input\", `<img src=\"${(0, (/*@__PURE__*/$parcel$interopDefault($fe0bd94cadab826a$exports)))}\" alt=\"Wizard\"> <span>Wizard</span>`, newPlayerBox, \"new-player-class\", {\n            id: `new-player-${playerNum}-class-mage`,\n            type: \"radio\",\n            name: `new-player-${playerNum}-class`,\n            value: \"mage\"\n        }, true);\n        return newPlayerBox;\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    // CharGen form submit handler: Start a new game when the players have chosen \n    // their name and fighter type.\n    #onNewPlayersSubmit(event) {\n        event.preventDefault();\n        const player1 = {\n            name: document.querySelector(\"#new-player-one-name\").value.trim(),\n            type: document.querySelector(`input[name=\"new-player-one-class\"]:checked`).value\n        };\n        const player2 = {\n            name: document.querySelector(\"#new-player-two-name\").value.trim(),\n            type: document.querySelector(`input[name=\"new-player-two-class\"]:checked`).value\n        };\n        this.startGame(player1, player2);\n    }\n}\n// Create gameInterface global object for managing the game. \nconst $70a8fd96a77f4374$var$gameInterface = new $70a8fd96a77f4374$var$GameInterface(document.querySelector(\"#game\"));\nvar $70a8fd96a77f4374$export$2e2bcd8739ae039 = $70a8fd96a77f4374$var$gameInterface;\n\n\n// Start a new game \ntry {\n    (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).newGame();\n} catch (error) {\n    console.error(error);\n    (0, $70a8fd96a77f4374$export$2e2bcd8739ae039).showError(error);\n}\n\n\n//# sourceMappingURL=index.d2df16bf.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"b9Fgu\\\",\\\"index.d2df16bf.js\\\",\\\"2rjaX\\\",\\\"rogue.9418359a.png\\\",\\\"bWLzp\\\",\\\"Stab.df3f343b.png\\\",\\\"k1COE\\\",\\\"backstab.cbfe68df.png\\\",\\\"lP0AT\\\",\\\"evasion.10f00589.png\\\",\\\"s8ijN\\\",\\\"potion.9e92e676.png\\\",\\\"8Fkm7\\\",\\\"warrior.80ba110f.png\\\",\\\"e8hyb\\\",\\\"Slash.0d282c12.png\\\",\\\"jHR1N\\\",\\\"Bash.1a78b3f2.png\\\",\\\"1QK31\\\",\\\"Bonk.72d83ecb.png\\\",\\\"4HaMh\\\",\\\"smash.8dd9de83.png\\\",\\\"7godC\\\",\\\"mage.13131773.png\\\",\\\"iGLqe\\\",\\\"Rayoffrost.e225c5f0.png\\\",\\\"fbNVe\\\",\\\"Ig-miss.52bd7018.png\\\",\\\"4TmEY\\\",\\\"lightning.10a957d3.png\\\",\\\"40ao2\\\",\\\"heal.e56e2835.png\\\",\\\"bTxU9\\\",\\\"archerright.43c66f17.png\\\",\\\"cEJ60\\\",\\\"archerleft.431eb79a.png\\\"]\"));","/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Main javascript file.\r\n*/\r\n\r\nimport gameInterface from \"./modules/GameInterface.js\";\r\n\r\n// Start a new game \r\ntry {\r\n    gameInterface.newGame();\r\n}\r\ncatch (error) {\r\n    console.error(error);\r\n    gameInterface.showError(error);\r\n}\r\n","\r\n/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: GameInterface\r\n    Class for managing the user interface and starting the game. \r\n    Accessed through the global gameInterface object created here. \r\n*/\r\nimport { createHTMLElement } from './utilities.js';\r\nimport Game from \"./Game.js\";\r\nimport Player from \"./Player.js\";\r\nimport Rogue from \"./FighterTypes/Rogue.js\";\r\nimport Warrior from \"./FighterTypes/Warrior.js\";\r\nimport Mage from \"./FighterTypes/Mage.js\";\r\nimport StatusEffect from './StatusEffect.js';\r\n\r\n// Images\r\nimport imgUrlWarrior from \"../images/warrior.png\";\r\nimport imgUrlRogue from \"../images/rogue.png\";\r\nimport imgUrlMage from \"../images/mage.png\";\r\nimport imgUrlArrowRight from \"../images/archerright.png\";\r\nimport imgUrlArrowLeft from \"../images/archerleft.png\";\r\n\r\n\r\nclass GameInterface {\r\n    #game;\r\n    #parentElement;\r\n    #messagesElement;\r\n    #errorsElement;\r\n    #playerElements;\r\n    #playerOne;\r\n    #playerTwo;\r\n    #playerIndicator;\r\n\r\n\r\n    constructor(parentElement) {\r\n        this.#parentElement = parentElement;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Build the main game interface and start the match.\r\n    startGame(player1, player2) {\r\n        this.#parentElement.innerHTML = '';\r\n        this.#playerElements = createHTMLElement('div', '', this.#parentElement, 'game-players', { id: \"players\" });\r\n        this.#errorsElement = createHTMLElement('div', '', this.#parentElement, 'game-errors', { id: \"errors\" });\r\n        this.#messagesElement = createHTMLElement('div', '', this.#parentElement, 'game-messages', { id: \"messages\" });\r\n\r\n        this.#playerOne = createHTMLElement('div', '', this.#playerElements, 'game-player', { id: `player-1` });\r\n        this.#playerIndicator = createHTMLElement('div', '', this.#playerElements, 'game-player-indicator', { id: `player-indicator` });\r\n        this.#playerTwo = createHTMLElement('div', '', this.#playerElements, 'game-player', { id: `player-2` });\r\n\r\n        this.#game = new Game(\r\n            new Player(player1.name, this.#createPlayerType(player1.type)),\r\n            new Player(player2.name, this.#createPlayerType(player2.type))\r\n        );\r\n\r\n        this.#game.nextPlayerTurn();\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Create fighter type class depending on type value string from form.\r\n    #createPlayerType(typeName) {\r\n        switch (typeName) {\r\n            case \"warrior\": return new Warrior();\r\n            case \"rogue\": return new Rogue();\r\n            case \"mage\": return new Mage();\r\n        }\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Set which player should be marked as the current/active player on the UI\r\n    setCurrentPlayer(playerNumber) {\r\n        this.#playerIndicator.innerHTML = \" \";\r\n        if (playerNumber == 1) {\r\n            createHTMLElement('img', 'Arrow', this.#playerIndicator, \"player-indicator-archer\", { src: imgUrlArrowRight })\r\n            this.#playerOne.classList.add(\"activeplayer\");\r\n            this.#playerTwo.classList.remove(\"activeplayer\");\r\n        }\r\n        else {\r\n            createHTMLElement('img', 'Arrow', this.#playerIndicator, \"player-indicator-archer\", { src: imgUrlArrowLeft })\r\n            this.#playerOne.classList.remove(\"activeplayer\");\r\n            this.#playerTwo.classList.add(\"activeplayer\");\r\n        }\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Set the color of the player's avatar box (css class)\r\n    setPlayerColor(playerNumber, playerStyle) {\r\n        if (playerNumber == 1) {\r\n            this.#playerOne.classList.add(playerStyle);\r\n        }\r\n        else {\r\n            this.#playerTwo.classList.add(playerStyle);\r\n        }\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Get the HTML element box for the player with the specified ID\r\n    getPlayerElement(playerIdx) {\r\n        return this.#playerElements.querySelector(`#player-${playerIdx}`);\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Show a message to the player (combat log)\r\n    showMessage(messageText) {\r\n        this.#messagesElement.prepend(createHTMLElement('div', messageText, null, 'game-message', null, true));\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Show an error message to the player (red error box)\r\n    showError(errorText) {\r\n        const errorMsg = createHTMLElement('div', errorText, null, 'game-error', null, true);\r\n        this.#errorsElement.prepend(errorMsg);\r\n        this.#errorsElement.classList.add(\"show\");\r\n\r\n        // Hide error after 10 seconds\r\n        setTimeout(() => {\r\n            errorMsg.remove();\r\n            if (this.#errorsElement.children.length <= 0) {\r\n                this.#errorsElement.classList.remove(\"show\");\r\n            }\r\n        }, 10000);\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Visually indicate the player's action between the avatar boxes\r\n    showPlayerMove(player, opponent, skillName, skillResult) {\r\n        // Disable buttons for both players while the action is displayed... \r\n        document.querySelectorAll(\".skill-button-wrapper\").forEach((buttonPanel) => {\r\n            buttonPanel.disabled = true;\r\n        });\r\n\r\n        // Skill icon\r\n        createHTMLElement(`img`, skillName, this.#playerIndicator, \"feedback-skillIcon\", { src: skillResult.skill.icon });\r\n\r\n        // Damage or healing amount\r\n        if (skillResult.roll !== 0) {\r\n            createHTMLElement(`p`, `${skillResult.roll !== null ? skillResult.roll : \"Miss!\"}`, this.#playerIndicator, (skillResult.skill.target == \"self\" ? \"feedback-healing\" : \"feedback-damage\"));\r\n        }\r\n\r\n        // Status effect, if any, if the skill hits\r\n        if ((skillResult.roll !== null) && (skillResult.skill.status !== \"none\")) {\r\n            createHTMLElement('div', StatusEffect.getEffectName(skillResult.skill.status), this.#playerIndicator, ['feedback-statuseffect', `status-${skillResult.skill.status}`]);\r\n        }\r\n\r\n        // Pause briefly while displaying the action before continuing next player turn.\r\n        setTimeout(() => { this.#game.nextPlayerTurn(); }, 2000);\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Show the game over box, declaring the winner. \r\n    showGameOverScreen(winnerName) {\r\n        const gameoverBox = createHTMLElement('dialog', '', document.body, 'game-over', { id: \"gameover\" });\r\n        createHTMLElement('h2', 'Game Over!', gameoverBox, 'game-over-title', { id: \"gameover-title\" });\r\n        createHTMLElement('div', `${winnerName} is victorious!`, gameoverBox, 'game-over-text', { id: \"gameover-text\" });\r\n\r\n        // Button: New game\r\n        const restartButton = createHTMLElement('button', 'Play again!', gameoverBox, 'game-over-button', { id: \"restart-button\" });\r\n        restartButton.addEventListener(\"click\", (event) => {\r\n            gameoverBox.close();\r\n            gameoverBox.remove();\r\n            this.newGame();\r\n        });\r\n\r\n        // Button: Dismiss game over box\r\n        const endButton = createHTMLElement('button', 'OK', gameoverBox, 'game-over-button', { id: \"gameover-button\" });\r\n        endButton.addEventListener(\"click\", (event) => {\r\n            gameoverBox.close();\r\n            gameoverBox.remove();\r\n        });\r\n\r\n        gameoverBox.showModal();\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Show the new game character creation screen\r\n    newGame() {\r\n        this.#parentElement.innerHTML = '';\r\n\r\n        const newPlayersForm = createHTMLElement('form', '', this.#parentElement, 'new-players-form', { id: 'new-players-form' });\r\n        const newPlayersWrapper = createHTMLElement('div', '', newPlayersForm, 'new-players-wrapper', { id: 'new-players-wrapper' });\r\n        const buttonsWrapper = createHTMLElement('div', '', newPlayersForm, 'start-game-button-wrapper');\r\n        createHTMLElement('button', 'Start game!', buttonsWrapper, 'start-game-button', { id: 'start-game-button' });\r\n\r\n        // Build boxes for both players\r\n        this.#createNewPlayerBox(newPlayersWrapper, 'one');\r\n        this.#createNewPlayerBox(newPlayersWrapper, 'two');\r\n\r\n        newPlayersForm.addEventListener(\"submit\", this.#onNewPlayersSubmit.bind(this));\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Form component for creating a new player\r\n    #createNewPlayerBox(parentElement, playerNum) {\r\n        const newPlayerBox = createHTMLElement('div', '', parentElement, 'new-player-box', { id: 'new-player-' + playerNum });\r\n        createHTMLElement('h2', 'Player ' + (playerNum == \"one\" ? \"1\" : \"2\"), newPlayerBox, 'new-player-title');\r\n        createHTMLElement('input', 'Choose your name:', newPlayerBox, 'new-player-name', { id: `new-player-${playerNum}-name`, type: 'text', minlength: '2', maxlength: '20', required: 'true' });\r\n        createHTMLElement('label', 'Choose your class:', newPlayerBox, 'new-player-label', { for: `new-player-${playerNum}-class` });\r\n        createHTMLElement('input', `<img src=\"${imgUrlWarrior}\" alt=\"Warrior\"> <span>Warrior</span>`, newPlayerBox, 'new-player-class', { id: `new-player-${playerNum}-class-warrior`, type: 'radio', name: `new-player-${playerNum}-class`, value: 'warrior', checked: \"true\" }, true);\r\n        createHTMLElement('input', `<img src=\"${imgUrlRogue}\" alt=\"Rogue\"> <span>Rogue</span>`, newPlayerBox, 'new-player-class', { id: `new-player-${playerNum}-class-rogue`, type: 'radio', name: `new-player-${playerNum}-class`, value: 'rogue' }, true);\r\n        createHTMLElement('input', `<img src=\"${imgUrlMage}\" alt=\"Wizard\"> <span>Wizard</span>`, newPlayerBox, 'new-player-class', { id: `new-player-${playerNum}-class-mage`, type: 'radio', name: `new-player-${playerNum}-class`, value: 'mage' }, true);\r\n        return newPlayerBox;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // CharGen form submit handler: Start a new game when the players have chosen \r\n    // their name and fighter type.\r\n    #onNewPlayersSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        const player1 = {\r\n            name: document.querySelector(\"#new-player-one-name\").value.trim(),\r\n            type: document.querySelector(`input[name=\"new-player-one-class\"]:checked`).value\r\n        };\r\n\r\n        const player2 = {\r\n            name: document.querySelector(\"#new-player-two-name\").value.trim(),\r\n            type: document.querySelector(`input[name=\"new-player-two-class\"]:checked`).value\r\n        };\r\n\r\n        this.startGame(player1, player2);\r\n    }\r\n}\r\n\r\n\r\n// Create gameInterface global object for managing the game. \r\nconst gameInterface = new GameInterface(document.querySelector(\"#game\"));\r\n\r\nexport default gameInterface;\r\n","/*\r\n    Generic utility functions. \r\n*/\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Set content of the matching HTML element if it exists, otherwise create it. \r\nexport function setHTMLElement(elementType, elementText, parentElement, cssClass, attributes, allowHTML) {\r\n    let selector = '';\r\n    if ((getIsValidObject(attributes) && getIsValidText(attributes.id))) {\r\n        selector = `#${attributes.id}`;\r\n    }\r\n    else if (getIsValidArray(cssClass)) {\r\n        selector = `${elementType}.${cssClass.join(\".\")}`;\r\n    }\r\n    else if (getIsValidText(cssClass)) {\r\n        selector = `${elementType}.${cssClass}`;\r\n    }\r\n    else {\r\n        selector = elementType;\r\n    }\r\n\r\n    let targetElement = parentElement.querySelector(selector);\r\n    if (getIsValidObject(targetElement, 0)) {\r\n        if ((elementType == 'ul') || (elementType == 'ol')) {\r\n            targetElement.innerHTML = '';\r\n            for (const listItemText of elementText) {\r\n                const newListItem = document.createElement(\"li\");\r\n                setElementContent(newListItem, listItemText, allowHTML);\r\n                targetElement.appendChild(newListItem);\r\n            }\r\n        }\r\n        else {\r\n            setElementContent(targetElement, elementText, allowHTML);\r\n        }\r\n    }\r\n    else {\r\n        targetElement = createHTMLElement(elementType, elementText, parentElement, cssClass, attributes, allowHTML);\r\n    }\r\n\r\n    return targetElement;\r\n}\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Create and return a new DOM element with content, optionally appending it to a parent element.\r\n//  * elementText can either be a string holding the content of the tag or the ALT of an img tag, or an array of strings \r\n//    with the options for UL, OL and SELECT tags. In the latter case the strings can also be formated like: value|textlabel|optgroup\r\n//  * elementClass can be a string or an array of strings holding CSS class(es) to apply to the element. \r\n//  * The elementAttributes parameter can be an object with a property for each attribute to set on the HTML element. \r\n// Note: Set CSS \"white-space: pre-wrap;\" on element if allowHTML is true and you wish to keep newlines displayed like with innerText. \r\nexport function createHTMLElement(elementType, elementText, parentElement = null, elementClass = '', elementAttributes = null, allowHTML = false) {\r\n    let newElement = document.createElement(elementType);\r\n\r\n    elementType = elementType.toLowerCase();\r\n\r\n    // Set any attributes on the element\r\n    if (getIsValidObject(elementAttributes, 1)) {\r\n        for (const attributeName in elementAttributes) {\r\n            newElement.setAttribute(attributeName, elementAttributes[attributeName]);\r\n        }\r\n    }\r\n\r\n    // Set CSS class(es) on the element\r\n    addClassToElement(newElement, elementClass);\r\n\r\n    // If text content is an array, check if the typs is a list or select tag\r\n    if (getIsValidArray(elementText)) {\r\n        // If type is a list and text is an array, build list items\r\n        if ((elementType == 'ul') || (elementType == 'ol')) {\r\n            for (const listItemText of elementText) {\r\n                const newListItem = document.createElement(\"li\");\r\n                setElementContent(newListItem, listItemText, allowHTML);\r\n                newElement.appendChild(newListItem);\r\n            }\r\n        }\r\n        // If type is a select form element and text is an array, build select option list\r\n        else if (elementType == 'select') {\r\n            for (const optionItemText of elementText) {\r\n                const [optValue, optLabel, optGroup] = optionItemText.split('|');\r\n                const newOptionItem = document.createElement(\"option\");\r\n\r\n                setElementContent(newOptionItem, (optLabel ?? optValue), allowHTML);\r\n                newOptionItem.value = optValue;\r\n\r\n                if (optGroup !== undefined) {\r\n                    let optionGroup = newElement.querySelector(`optgroup[label=\"${optGroup}\"]`);\r\n                    if ((optionGroup === undefined) || (optionGroup === null)) {\r\n                        optionGroup = document.createElement(\"optgroup\");\r\n                        optionGroup.label = optGroup;\r\n                        newElement.appendChild(optionGroup);\r\n                    }\r\n                    optionGroup.appendChild(newOptionItem);\r\n                }\r\n                else {\r\n                    newElement.appendChild(newOptionItem);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            setElementContent(newElement, elementText[0], allowHTML);\r\n        }\r\n    }\r\n    else if (getIsValidText(elementText, 1)) {\r\n        // Special case for images - set ALT attribute\r\n        if (elementType == 'img') {\r\n            newElement.alt = elementText;\r\n        }\r\n        // Special case for input fields, create labels\r\n        else if ((elementType == 'input') && (elementText.length > 0)) {\r\n            const actualNewElement = newElement;\r\n            const newElementLabel = document.createElement(\"label\");\r\n            newElement = document.createElement(\"div\");\r\n            newElement.id = `${actualNewElement.id}-wrapper`;\r\n            if (elementClass.length > 0) {\r\n                newElement.classList.add((Array.isArray(elementClass) ? elementClass[0] : elementClass) + \"-wrapper\");\r\n            }\r\n\r\n            newElementLabel.setAttribute(\"for\", actualNewElement.id);\r\n            setElementContent(newElementLabel, elementText, allowHTML);\r\n\r\n            if ((actualNewElement.getAttribute(\"type\") == \"radio\") || (actualNewElement.getAttribute(\"type\") == \"checkbox\")) {\r\n                newElementLabel.classList.add(`input-box-label`);\r\n                newElement.append(actualNewElement, newElementLabel);\r\n            }\r\n            else {\r\n                newElement.append(newElementLabel, actualNewElement);\r\n            }\r\n\r\n        }\r\n        // Everything else, set the text content\r\n        else {\r\n            setElementContent(newElement, elementText, allowHTML);\r\n        }\r\n    }\r\n\r\n    // Append to parent, if set\r\n    if ((parentElement !== undefined) && (parentElement !== null)) {\r\n        parentElement.appendChild(newElement);\r\n    }\r\n    return newElement;\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Sets the content of an element as text or HTML depending on the allowHTML parameter. \r\nexport function setElementContent(element, content, allowHTML) {\r\n    if (allowHTML) {\r\n        element.innerHTML = content;\r\n    }\r\n    else {\r\n        element.innerText = content;\r\n    }\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Add CSS class(es) to a DOM element\r\nexport function addClassToElement(targetElement, classesToAdd) {\r\n    if ((targetElement !== undefined) && (targetElement !== null)) {\r\n        if (classesToAdd.length > 0) {\r\n            if (Array.isArray(classesToAdd)) {\r\n                targetElement.classList.add(...classesToAdd);\r\n            }\r\n            else if (getIsValidText(classesToAdd)) {\r\n                targetElement.classList.add(classesToAdd);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\n// Utility to determine if a text variable has been set and assigned a value.\r\nexport function getIsValidText(text, lengthLimit = 1) {\r\n    return ((text !== undefined) && (text !== null) && (text.length !== undefined) && (text.length >= lengthLimit));\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Kontrollera om angiven parameter är ett giltigt nummer\r\nexport function getIsValidNumber(number) {\r\n    return (number !== undefined) && (number !== null) && !isNaN(number);\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\n// Utility to determine if a variable is an array with content\r\nexport function getIsValidArray(arr, lengthLimit = 1) {\r\n    return ((arr !== undefined) && (arr !== null) && (Array.isArray(arr)) && (arr.length !== undefined) && (arr.length >= lengthLimit));\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\n//  Utility to determine if a variable is an object with properties set\r\nexport function getIsValidObject(obj, requiredProperties = 1) {\r\n    return ((obj !== undefined) && (obj !== null) && (typeof obj == \"object\") && (Object.keys(obj).length >= requiredProperties));\r\n}","/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: Game\r\n    Logic for controlling a match of the game. \r\n*/\r\nimport gameInterface from \"./GameInterface.js\";\r\nimport Player from \"./Player.js\";\r\nimport { createHTMLElement, setHTMLElement } from './utilities.js';\r\n\r\nexport default class Game {\r\n    #gameRound = 0;\r\n    #currentPlayer;\r\n    #playerOne;\r\n    #playerTwo;\r\n\r\n\r\n    constructor(player1, player2) {\r\n        if (!(player1 instanceof Player) || !(player2 instanceof Player)) {\r\n            throw new Error(\"Invalid player encountered, unable to start match.\");\r\n        }\r\n\r\n        this.#playerOne = player1;\r\n        this.#playerTwo = player2;\r\n\r\n        this.#playerOne.id = 1;\r\n        this.#playerTwo.id = 2;\r\n\r\n        gameInterface.setPlayerColor(1, this.#playerOne.type.style);\r\n        gameInterface.setPlayerColor(2, this.#playerTwo.type.style);\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Get the player currently taking their turn\r\n    get player() {\r\n        return this.#currentPlayer;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Get the player currently waiting for their turn\r\n    get opponent() {\r\n        return (this.#currentPlayer === this.#playerOne ? this.#playerTwo : this.#playerOne);\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Update the game for a turn, passing control to the next player\r\n    nextPlayerTurn() {\r\n        // End game if anyone has gotten KO'd\r\n        if (this.checkForGameOver()) {\r\n            return;\r\n        }\r\n\r\n        // Increase round counter once both players have taken their turn. \r\n        if (this.#playerOne.round === this.#playerTwo.round) {\r\n            this.#gameRound++;\r\n        }\r\n\r\n        // Pass control to next player\r\n        this.#currentPlayer = this.opponent;\r\n        this.#currentPlayer.incrementRound();\r\n\r\n        // Skip this turn if the player is stunned\r\n        if (this.#currentPlayer.hasStatusEffect(\"stun\")) {\r\n            gameInterface.showMessage(`<strong>Round ${this.#gameRound}:</strong> ${this.#currentPlayer.name} is stunned, skipping turn!`);\r\n            this.#currentPlayer.updateStatusEffects();\r\n            this.nextPlayerTurn();\r\n            return;\r\n        }\r\n\r\n        gameInterface.showMessage(`<strong>Round ${this.#gameRound}:</strong> ${this.#currentPlayer.name}'s turn!`);\r\n        gameInterface.setCurrentPlayer(this.#currentPlayer.id);\r\n\r\n        // Process status effects\r\n        this.#currentPlayer.updateStatusEffects();\r\n\r\n        // Update displayed player info\r\n        this.#buildPlayerAvatar(this.#playerOne);\r\n        this.#buildPlayerAvatar(this.#playerTwo);\r\n\r\n        // Game over if anyone is KO'd\r\n        this.checkForGameOver();\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Check if either player has been knocked out.\r\n    checkForGameOver() {\r\n        if (this.#playerOne.health <= 0) {\r\n            this.#doGameOver(this.#playerTwo, this.#playerOne);\r\n            return true;\r\n        }\r\n        if (this.#playerTwo.health <= 0) {\r\n            this.#doGameOver(this.#playerOne, this.#playerTwo);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Someone got knocked out? Show the Game Over box.\r\n    #doGameOver(winner, loser) {\r\n        this.#gameRound = 0;\r\n        this.#currentPlayer = null;\r\n\r\n        gameInterface.showMessage(`<strong>GAME OVER:</strong> ${loser.name} is knocked out, ${winner.name} wins!`);\r\n        gameInterface.showGameOverScreen(winner.name);\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Build/update the player info elements on the page\r\n    #buildPlayerAvatar(player) {\r\n        const outputElement = gameInterface.getPlayerElement(player.id);\r\n\r\n        // Update elements if they exist, otherwise create them. \r\n        setHTMLElement('div', player.name, outputElement, 'player-name', { id: `player-${player.id}-name` });\r\n        setHTMLElement('div', `<span>Class:</span> ${player.type.name}`, outputElement, 'player-class', { id: `player-${player.id}-class` }, true);\r\n        setHTMLElement('div', `<span>Health:</span> ${player.health} / ${player.maxHealth}`, outputElement, 'player-health', { id: `player-${player.id}-health` }, true);\r\n        setHTMLElement('div', `<span>Defense:</span> ${player.armor}`, outputElement, 'player-defense', { id: `player-${player.id}-defense` }, true);\r\n        setHTMLElement('ul', player.getStatusEffects(), outputElement, 'player-effects', { id: `player-${player.id}-effects` }, true);\r\n        setHTMLElement('img', 'Player avatar', outputElement, 'avatar-icon', { src: `${player.type.icon}` })\r\n\r\n        // Build buttons for available skills\r\n        this.#buildSkillButtons(player);\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Build the buttons with the player's available skills\r\n    #buildSkillButtons(player) {\r\n        const playerSkills = player.type.getAvailableSkills();\r\n        const outputElement = gameInterface.getPlayerElement(player.id);\r\n        let buttonContainer = outputElement.querySelector(\".skill-buttons\");\r\n        let buttonWrapper;\r\n\r\n        // If the skill button form does not exist, create it, otherwise use existing one.\r\n        if ((buttonContainer === undefined) || (buttonContainer === null)) {\r\n            buttonContainer = createHTMLElement('form', '', outputElement, 'skill-buttons', { id: `player-${player.id}-skills` });\r\n            buttonWrapper = createHTMLElement('fieldset', '', buttonContainer, 'skill-button-wrapper');\r\n\r\n            // Event handler for when the player clicks a skill button.\r\n            buttonContainer.addEventListener(\"submit\", (event) => {\r\n                event.preventDefault();\r\n                const usedSkill = event.submitter.getAttribute(\"skillname\");\r\n                const skillResult = this.player.useSkill(usedSkill, this.opponent);\r\n                gameInterface.showPlayerMove(this.player, this.opponent, usedSkill, skillResult);\r\n            });\r\n        }\r\n        else {\r\n            buttonWrapper = buttonContainer.querySelector(\".skill-button-wrapper\");\r\n        }\r\n\r\n        buttonWrapper.innerHTML = '';\r\n\r\n        // Disable the buttons for the player not taking this turn\r\n        buttonWrapper.disabled = (player == this.#currentPlayer ? false : true);\r\n\r\n        // Create a button for each skill the player has available to use.\r\n        for (const skill of playerSkills) {\r\n            const buttonId = \"player-\" + player.id + \"-\" + skill.name.toLowerCase().replaceAll(' ', '-');\r\n            // If the skill has limited uses per match, show remaining uses on the buton.\r\n            const buttonLabel = `<img src=\"${skill.icon}\">` + (skill.uses === -1 ? skill.name : `${skill.name} (${skill.uses})`);\r\n            createHTMLElement('button', buttonLabel, buttonWrapper, 'player-skill', { id: buttonId, skillname: skill.name }, true);\r\n            createHTMLElement('div', skill.description, buttonWrapper, 'player-skill-tooltip');\r\n        }\r\n    }\r\n}","/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: Player\r\n    Defines a player in the game, with their game state and choice of name and fighter-type.\r\n*/\r\nimport FighterType from \"./FighterType.js\";\r\nimport StatusEffect from \"./StatusEffect.js\";\r\nimport AttackSkill from \"./AttackSkill.js\";\r\n\r\nexport default class Player {\r\n    #playerId;\r\n    #playerName;\r\n    #currentHealth;\r\n    #fighterType;\r\n    #statusEffects;\r\n    #combatRound;\r\n\r\n\r\n    constructor(playerName, fighterType) {\r\n        if ((typeof fighterType !== \"object\") || !(fighterType instanceof FighterType)) {\r\n            throw new Error(\"Invalid fighter type specified!\");\r\n        }\r\n\r\n        this.name = playerName;\r\n        this.#fighterType = fighterType;\r\n        this.#currentHealth = this.#fighterType.maxHealth;\r\n        this.#statusEffects = [];\r\n        this.#combatRound = 0;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Get ID of the player\r\n    get id() {\r\n        return this.#playerId;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Set the ID of the player\r\n    set id(newID) {\r\n        if ((newID == 1) || (newID == 2)) {\r\n            this.#playerId = newID;\r\n        }\r\n        else {\r\n            throw new Error(\"The player ID must be either 1 or 2.\");\r\n        }\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Get the name of the player\r\n    get name() {\r\n        return this.#playerName;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Change the name of the player\r\n    set name(newName) {\r\n        if ((typeof newName !== \"string\") || (newName.length < 2) || (newName.length > 20)) {\r\n            throw new Error(\"The player name must be a string between 2 and 20 characters in length.\");\r\n        }\r\n        this.#playerName = newName;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Get the current health of the player\r\n    get health() {\r\n        return this.#currentHealth;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Get the size of the health pool of the player (depends on chosen fighter type)\r\n    get maxHealth() {\r\n        return this.#fighterType.maxHealth;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Get the class/fighter type of the player\r\n    get type() {\r\n        return this.#fighterType;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Get the effective defense bonus value of the player\r\n    get armor() {\r\n        return this.type.armor + (this.hasStatusEffect(\"evade\") ? 15 : 0);\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Get the value of the combat round counter for the player\r\n    get round() {\r\n        return this.#combatRound;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Increment the combat round counter of the player\r\n    incrementRound() {\r\n        this.#combatRound++;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Damage the player by the specified amount (capped at 0)\r\n    takeDamage(damageAmount) {\r\n        if (typeof damageAmount === \"string\") {\r\n            damageAmount = parseInt(damageAmount);\r\n        }\r\n        if (damageAmount > 0) {\r\n            damageAmount = Math.min(damageAmount, this.#currentHealth);\r\n            this.#currentHealth -= damageAmount;\r\n        }\r\n        return damageAmount;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Heal the player the specified amount (capped at the health pool size)\r\n    heal(healAmount) {\r\n        if (typeof healAmount === \"string\") {\r\n            healAmount = parseInt(healAmount);\r\n        }\r\n        if (healAmount > 0) {\r\n            healAmount = (this.#currentHealth + healAmount > this.type.maxHealth ? this.type.maxHealth - this.#currentHealth : healAmount);\r\n            this.#currentHealth += healAmount;\r\n        }\r\n        return healAmount;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Apply a status effect to the player\r\n    addStatusEffect(effectType, duration) {\r\n        if (AttackSkill.statusEffects.includes(effectType) && (duration > 0)) {\r\n            this.#statusEffects.push(new StatusEffect(effectType, duration, this));\r\n        }\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Remove a status effect from the player\r\n    removeStatusEffect(effectType) {\r\n        let removeCount = 0;\r\n\r\n        if (AttackSkill.statusEffects.includes(effectType)) {\r\n            const updatedStatusList = [];\r\n\r\n            for (const status of this.#statusEffects) {\r\n                if (status.effectType != effectType) {\r\n                    updatedStatusList.push(status);\r\n                }\r\n                else {\r\n                    removeCount++;\r\n                    status.expireMessage();\r\n                }\r\n            }\r\n            this.#statusEffects = updatedStatusList;\r\n        }\r\n\r\n        return removeCount;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Check if this player has a status effect of the specified type applied. \r\n    hasStatusEffect(effectType) {\r\n        for (const status of this.#statusEffects) {\r\n            if (status.effectType == effectType) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Get an array listing all status effects applied to the player.  \r\n    getStatusEffects() {\r\n        const statusList = [];\r\n        for (const status of this.#statusEffects) {\r\n            statusList.push(`<span class=\"status-${status.effectType}\">${status.effectName} [${parseInt(status.duration)}]</span>`);\r\n        }\r\n        return statusList;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Update duration of any status effects applied to the player and proc \r\n    // effects that apply per round. \r\n    updateStatusEffects() {\r\n        const updatedStatusList = [];\r\n        for (let i = 0; i < this.#statusEffects.length; i++) {\r\n            const status = this.#statusEffects[i];\r\n\r\n            status.turnProc();\r\n            if (status.duration > 0) {\r\n                updatedStatusList.push(status);\r\n            }\r\n            else {\r\n                status.expireMessage();\r\n            }\r\n        }\r\n        this.#statusEffects = updatedStatusList;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Make the player use the skill with the specified name\r\n    useSkill(attackSkill, opponentPlayer) {\r\n        const skillObj = this.type.getAttackSkill(attackSkill);\r\n\r\n        if ((skillObj === undefined) || (skillObj === null)) {\r\n            throw new Error(`The skill ${attackSkill} is not known to a ${this.type}!`);\r\n        }\r\n\r\n        const skillDmg = skillObj.use(opponentPlayer, this);\r\n        return { roll: skillDmg, skill: skillObj };\r\n    }\r\n}","/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: FighterType\r\n    Definition of a type of fighter (i.e. Warrior, Mage, Rogue etc)\r\n    Abstract, do not create objects of this class, use one of its subclasses in FighterTypes instead. \r\n*/\r\nimport AttackSkill from \"./AttackSkill.js\";\r\n\r\nexport default class FighterType {\r\n    #fighterName;\r\n    #maxHealth = 800;\r\n    #armorClass = 10;\r\n    #attackTypes = [];\r\n    #classStyle;\r\n    #classIcon;\r\n\r\n\r\n    constructor(fighterName, maxHealth, armorClass, style, icon) {\r\n        this.name = fighterName;\r\n        this.#maxHealth = maxHealth;\r\n        this.#armorClass = armorClass;\r\n        this.#classStyle = style;\r\n        this.#classIcon = icon;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Change the name of this fighter type\r\n    set name(fighterName) {\r\n        if ((typeof fighterName !== \"string\") || (fighterName.length < 2) || (fighterName.length > 20)) {\r\n            throw new Error(\"The name of a fighter type must be a string between 2 and 20 characters in length.\");\r\n        }\r\n        this.#fighterName = fighterName;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the name of this fighter type\r\n    get name() {\r\n        return this.#fighterName;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the armor class of this fighter type\r\n    get armor() {\r\n        return this.#armorClass;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the health pool size of this fighter type\r\n    get maxHealth() {\r\n        return this.#maxHealth;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the icon for this class\r\n    get icon() {\r\n        return this.#classIcon;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the color for this class\r\n    get style() {\r\n        return this.#classStyle;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    addSkill(attackType) {\r\n        if ((typeof attackType !== \"object\") || !(attackType instanceof AttackSkill)) {\r\n            throw new Error(`Error attempting to add invalid skill to ${this.#fighterName}!`);\r\n        }\r\n\r\n        if (!this.#attackTypes.includes(attackType)) {\r\n            this.#attackTypes.push(attackType);\r\n        }\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the attack or skill with the specified name\r\n    getAttackSkill(skillName) {\r\n        for (const skill of this.#attackTypes) {\r\n            if (skill.name == skillName) {\r\n                return skill;\r\n            }\r\n        }\r\n        throw new Error(`The ${this.#fighterName} does not know the ${skillName} skill.`);\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return a list of skills available to use.\r\n    getAvailableSkills() {\r\n        if (this.#attackTypes.length <= 0) {\r\n            throw new Error(`The ${this.#fighterName} does not have any skills assigned!`);\r\n        }\r\n\r\n        return this.#attackTypes.filter(({ uses }) => ((uses > 0) || (uses === -1)));\r\n    }\r\n}","/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: AttackSkill\r\n    Defines a type of skill or attack move a player can use (i.e. Firebolt, Stab, Heal etc)\r\n*/\r\nimport gameInterface from \"./GameInterface.js\";\r\n\r\n\r\nexport default class AttackSkill {\r\n    // Static lookup table for checking valid status effect types a skill may apply. \r\n    static statusEffects = ['none', 'heal', 'cure', 'evade', 'burn', 'stun', 'riposte'];\r\n    #skillName;\r\n    #skillDamageMin;\r\n    #skillDamageMax;\r\n    #skillUses;\r\n    #skillTarget;\r\n    #skillHitChance = 10;\r\n    #skillIcon;\r\n    #skillDescription;\r\n    #skillStatus = 'none';\r\n    #skillStatusDuration = 0;\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Set the name, damage range, number of uses and target of this skill\r\n    constructor(name, damageMin, damageMax, hitChance = 10, charges = -1, target = 'enemy', statusEffect = 'none', icon = 'skill.png', description = '') {\r\n        this.#skillName = name;\r\n        this.#skillDamageMin = damageMin;\r\n        this.#skillDamageMax = damageMax;\r\n        this.#skillIcon = icon;\r\n        this.#skillDescription = description;\r\n\r\n        const [statusEffectType, statusEffectDuration] = statusEffect.split('|');\r\n\r\n        if (AttackSkill.statusEffects.includes(statusEffectType)) {\r\n            this.#skillStatus = statusEffectType;\r\n            this.#skillStatusDuration = statusEffectDuration ?? 0;\r\n        }\r\n\r\n        // Attack bonus of this skill\r\n        if ((hitChance >= 0) && (hitChance <= 20)) {\r\n            this.#skillHitChance = hitChance;\r\n        }\r\n\r\n        // cap uses per match to between 1 - 10 (except -1 = unlimited uses)\r\n        this.#skillUses = (charges === -1 ? -1 : Math.max(1, Math.min(charges, 10)));\r\n\r\n        // skill targets either the player or the opponent (self-targeted are assumed to be beneficial)\r\n        this.#skillTarget = (target !== \"self\" ? \"enemy\" : \"self\");\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the lower range of the skill damage\r\n    get minDamage() {\r\n        return this.#skillDamageMin;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the upper range of the skill damage\r\n    get maxDamage() {\r\n        return this.#skillDamageMax;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the name of the skill\r\n    get name() {\r\n        return this.#skillName;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the target type of the skill, either: \"self\" or \"enemy\"\r\n    get target() {\r\n        return this.#skillTarget;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the number of uses left of this skill\r\n    get uses() {\r\n        return this.#skillUses;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return its type if this skill inflicts any kind of status effect.\r\n    get status() {\r\n        return this.#skillStatus;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the duration of the status effect inflicted by the this skill, if any. \r\n    get statusDuration() {\r\n        return this.#skillStatusDuration;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the attack bonus modifier of this skill (0-20)\r\n    get hitChance() {\r\n        return this.#skillHitChance;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the filename of the icon for this skill\r\n    get icon() {\r\n        return this.#skillIcon;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the skill description\r\n    get description() {\r\n        return this.#skillDescription;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Use the skill, decreasing number of available uses and returning rolled damage/healing\r\n    use(opponent, skillUser) {\r\n        if ((this.#skillUses != -1) && (this.#skillUses <= 0)) {\r\n            throw new Error(`You cannot use ${this.#skillName} any more times during this match.`);\r\n        }\r\n\r\n        let skillRoll = Math.round((this.#skillDamageMax - this.#skillDamageMin) * Math.random()) + this.#skillDamageMin;\r\n\r\n        if (this.#skillUses != -1) {\r\n            this.#skillUses--;\r\n        }\r\n\r\n        // Skill is self-targeted\r\n        if (this.target == \"self\") {\r\n            if ((this.status == \"heal\") || (this.status == \"cure\")) {\r\n                skillUser.heal(skillRoll);\r\n                gameInterface.showMessage(`${skillUser.name} healed themselves for ${skillRoll} health.`);\r\n            }\r\n            if (this.status == \"cure\") {\r\n                if (skillUser.removeStatusEffect(\"burn\")) {\r\n                    gameInterface.showMessage(`${skillUser.name} cured themselves of burning.`);\r\n                }\r\n            }\r\n\r\n            // Apply status effect\r\n            if ((this.status != \"none\") && (this.statusDuration > 0)) {\r\n                skillUser.addStatusEffect(this.status, this.statusDuration);\r\n            }\r\n        }\r\n        // Skill is enemy-targeted\r\n        else {\r\n            const attackRoll = this.#rollDice(20, this.hitChance);\r\n            const defenseRoll = this.#rollDice(20, opponent.armor);\r\n\r\n            if (attackRoll >= defenseRoll) {\r\n                opponent.takeDamage(skillRoll);\r\n                gameInterface.showMessage(`${skillUser.name} attacked ${opponent.name} with ${this.name} for ${skillRoll} damage. (${attackRoll} vs. ${defenseRoll})`);\r\n\r\n                // Apply status effect\r\n                if ((this.status == \"riposte\") && (this.statusDuration > 0)) {\r\n                    skillUser.addStatusEffect(this.status, this.statusDuration);\r\n                }\r\n                else if ((this.status != \"none\") && (this.statusDuration > 0)) {\r\n                    opponent.addStatusEffect(this.status, this.statusDuration);\r\n                }\r\n\r\n                if (opponent.hasStatusEffect('riposte')) {\r\n                    skillUser.takeDamage(15);\r\n                    gameInterface.showMessage(`${opponent.name} riposted ${skillUser.name}'s attack dealing 15 damage in return.`);\r\n                }\r\n            }\r\n            else {\r\n                gameInterface.showMessage(`${skillUser.name} attacked ${opponent.name} with ${this.name} but missed! (${attackRoll} vs. ${defenseRoll})`);\r\n                skillRoll = null;\r\n            }\r\n        }\r\n\r\n        return skillRoll;\r\n\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Roll and return a random number with an added modifier value\r\n    #rollDice(sides, modifier) {\r\n        return Math.ceil(Math.random() * sides) + modifier;\r\n    }\r\n}\r\n","/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: StatusEffect\r\n    Class for defining a status effect applied to a player, either beneficial or detrimental. \r\n    Valid status effect types are:\r\n    'heal'      - instant heal + health regen over time: 10 health/round\r\n    'cure'      - instant heal + cure burning\r\n    'evade'     - +15 defense bonus\r\n    'burn'      - Damage over time: 10 damage/round\r\n    'stun'      - Affected player skips their turn\r\n    'riposte'   - Retaliate against incoming attacks, dealing 15 damage\r\n*/\r\nimport gameInterface from \"./GameInterface.js\";\r\n\r\nexport default class StatusEffect {\r\n    #effectType;\r\n    #effectDuration;\r\n    #effectTarget;\r\n\r\n\r\n    constructor(effectType, duration, target) {\r\n        this.#effectDuration = duration;\r\n        this.#effectType = effectType;\r\n        this.#effectTarget = target;\r\n\r\n        this.#showFeedback();\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the number of rounds until this status effect expires\r\n    get duration() {\r\n        return this.#effectDuration;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return the type of this status effect, one of Attackskill.statusEffects\r\n    get effectType() {\r\n        return this.#effectType;\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Return a display name of the type of status effect\r\n    get effectName() {\r\n        return StatusEffect.getEffectName(this.effectType);\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Get string representation / name of an effect type\r\n    // Static to allow general type to name lookup outside of StatusEffect objects. \r\n    static getEffectName(effectType) {\r\n        switch (effectType) {\r\n            case \"heal\": return \"Health regen\";\r\n            case \"cure\": return \"Healing\";\r\n            case \"evade\": return \"Evading\";\r\n            case \"burn\": return \"Burning\";\r\n            case \"stun\": return \"Stunned\";\r\n            case \"riposte\": return \"Riposting\";\r\n        }\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Do round update for the status effect. Decrease remaining duration and\r\n    // apply any effects that tick per turn. \r\n    turnProc() {\r\n        if (this.#effectDuration > 0) {\r\n            this.#effectDuration--;\r\n\r\n            switch (this.effectType) {\r\n                case \"burn\":\r\n                    this.#effectTarget.takeDamage(10);\r\n                    gameInterface.showMessage(`${this.#effectTarget.name} takes 10 damage from burning.`);\r\n                    break;\r\n                case \"heal\":\r\n                    this.#effectTarget.heal(10);\r\n                    gameInterface.showMessage(`${this.#effectTarget.name} regenerates 10 health.`);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Show a feedback message when the status effect is applied. \r\n    #showFeedback() {\r\n        switch (this.effectType) {\r\n            case \"heal\":\r\n                gameInterface.showMessage(`${this.#effectTarget.name} is regenerating health for ${this.#effectDuration} rounds!`);\r\n                break;\r\n            case \"evade\":\r\n                gameInterface.showMessage(`${this.#effectTarget.name} is evading attacks (+5 defense) for ${this.#effectDuration} rounds!`);\r\n                break;\r\n            case \"burn\":\r\n                gameInterface.showMessage(`${this.#effectTarget.name} is burning for ${this.#effectDuration} rounds!`);\r\n                break;\r\n            case \"stun\":\r\n                gameInterface.showMessage(`${this.#effectTarget.name} is stunned for ${this.#effectDuration} rounds!`);\r\n                break;\r\n            case \"riposte\":\r\n                gameInterface.showMessage(`${this.#effectTarget.name} is riposting attacks for ${this.#effectDuration} rounds!`);\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // Show a feedback message when the status effect is expiring or removed. \r\n    expireMessage() {\r\n        switch (this.effectType) {\r\n            case \"heal\":\r\n                gameInterface.showMessage(`${this.#effectTarget.name} stopped regenerating health.`);\r\n                break;\r\n            case \"evade\":\r\n                gameInterface.showMessage(`${this.#effectTarget.name} stopped evading attacks.`);\r\n                break;\r\n            case \"burn\":\r\n                gameInterface.showMessage(`${this.#effectTarget.name} is no longer burning.`);\r\n                break;\r\n            case \"stun\":\r\n                gameInterface.showMessage(`${this.#effectTarget.name} recovered from stun.`);\r\n                break;\r\n            case \"riposte\":\r\n                gameInterface.showMessage(`${this.#effectTarget.name} stopped riposting attacks.`);\r\n                break;\r\n        }\r\n    }\r\n}","/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: FighterType -> Rogue\r\n    Definition of stats and skills for a player of the rogue class.\r\n*/\r\nimport FighterType from \"../FighterType.js\";\r\nimport AttackSkill from \"../AttackSkill.js\";\r\n\r\n// Images\r\nimport imgUrlRogue from \"../../images/rogue.png\";\r\nimport imgUrlSpellSkillStab from \"../../images/Stab.png\";\r\nimport imgUrlSpellSkillBackstab from \"../../images/backstab.png\";\r\nimport imgUrlSpellSkillEvasion from \"../../images/evasion.png\";\r\nimport imgUrlSpellSkillPotion from \"../../images/potion.png\";\r\n\r\nexport default class Rogue extends FighterType {\r\n\r\n    constructor() {\r\n        // name, health, defense, color, icon\r\n        super('Rogue', 300, 4, \"fighterclass-rogue\", imgUrlRogue);\r\n\r\n        // Create unique skills for this fighter type\r\n        this.addSkill(new AttackSkill(\r\n            \"Stab\",\r\n            5,  // min damage\r\n            15, // max damage\r\n            15, // attack bonus\r\n            -1, // uses per match (-1 = unlimited)\r\n            \"enemy\", // target\r\n            \"none\", // status effect\r\n            imgUrlSpellSkillStab,  // icon\r\n            'Stab opponent for 5-15 damage. (+15 attack)'\r\n        ));\r\n\r\n        this.addSkill(new AttackSkill(\r\n            \"Backstab\",\r\n            40, // min damage\r\n            70, // max damage\r\n            10, // attack bonus\r\n            5, // uses per match\r\n            \"enemy\", // target\r\n            \"riposte|1\", // status effect | duration (retaliate against incoming attacks)\r\n            imgUrlSpellSkillBackstab, // icon\r\n            'Backstab opponent for 30-60 damage and riposte incoming attacks for 1 turn, retaliating for 15 damage. (+10 attack)'\r\n        ));\r\n\r\n        this.addSkill(new AttackSkill(\r\n            \"Evasion\",\r\n            0, // min damage\r\n            0, // max damage\r\n            0, // attack bonus\r\n            3, // uses per match\r\n            \"self\", // target\r\n            \"evade|3\",  // status effect | duration (defense bonus)\r\n            imgUrlSpellSkillEvasion,  // icon\r\n            'Evade attacks for three rounds (+15 defense).'\r\n        ));\r\n\r\n        this.addSkill(new AttackSkill(\r\n            \"Potion\",\r\n            30, // min damage\r\n            35, // max damage\r\n            10, // attack bonus\r\n            3, // uses per match\r\n            \"self\", // target\r\n            \"heal|2\", // status effect | duration (heal + health regen over time)\r\n            imgUrlSpellSkillPotion, // icon\r\n            'Heal yourself for 30-35 health and regen 10 health for 2 rounds.'\r\n        ));\r\n    }\r\n}","module.exports = new __parcel__URL__(\"rogue.9418359a.png\").toString();","module.exports = new __parcel__URL__(\"Stab.df3f343b.png\").toString();","module.exports = new __parcel__URL__(\"backstab.cbfe68df.png\").toString();","module.exports = new __parcel__URL__(\"evasion.10f00589.png\").toString();","module.exports = new __parcel__URL__(\"potion.9e92e676.png\").toString();","/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: FighterType -> Warrior\r\n    Definition of stats and skills for a player of the warrior class.\r\n*/\r\n\r\nimport FighterType from \"../FighterType.js\";\r\nimport AttackSkill from \"../AttackSkill.js\";\r\n\r\n// Images\r\nimport imgUrlWarrior from \"../../images/warrior.png\";\r\nimport imgUrlAttackSlash from \"../../images/Slash.png\";\r\nimport imgUrlAttackBash from \"../../images/Bash.png\";\r\nimport imgUrlAttackBonk from \"../../images/Bonk.png\";\r\nimport imgUrlAttackFlame from \"../../images/smash.png\";\r\n\r\nexport default class Warrior extends FighterType {\r\n\r\n    constructor() {\r\n        // name, health, defense, color, icon\r\n        super('Warrior', 400, 5, \"fighterclass-warrior\", imgUrlWarrior);\r\n\r\n        // Create unique skills for this fighter type\r\n        this.addSkill(new AttackSkill(\r\n            \"Slash\",\r\n            10, // min damage\r\n            15, // max damage\r\n            15, // attack bonus\r\n            -1, // uses per match (-1 = unlimited)\r\n            \"enemy\", // target\r\n            \"none\", // status effect\r\n            imgUrlAttackSlash, // icon\r\n            'Slash opponent for 10-15 damage. (+15 attack)'\r\n        ));\r\n\r\n        this.addSkill(new AttackSkill(\r\n            \"Bash\",\r\n            5, // min damage\r\n            40, // max damage\r\n            10, // attack bonus\r\n            -1, // uses per match (-1 = unlimited)\r\n            \"enemy\", // target\r\n            \"none\", // status effect\r\n            imgUrlAttackBash,\r\n            'Bash opponent for 5-40 damage. (+10 attack)'\r\n        ));\r\n\r\n        this.addSkill(new AttackSkill(\r\n            \"Bonk!\",\r\n            15, // min damage\r\n            20, // max damage\r\n            10, // attack bonus\r\n            3, // uses per match\r\n            \"enemy\", // target\r\n            \"stun|1\", // status effect | duration (skip turn)\r\n            imgUrlAttackBonk,\r\n            'Bonk opponent on the head for 15-20 damage, stunning them for 1 round. (+10 attack)'\r\n        ));\r\n\r\n        this.addSkill(new AttackSkill(\r\n            \"Flame blade\",\r\n            50, // min damage\r\n            50, // max damage\r\n            5, // attack bonus\r\n            3, // uses per match\r\n            \"enemy\", // target\r\n            \"burn|2\", // status effect | duration (damage over time)\r\n            imgUrlAttackFlame, // icon\r\n            'Hit opponent with a flaming blade for 50 damage and inflict burn for 2 rounds. (+5 attack)'\r\n        ));\r\n    }\r\n}","module.exports = new __parcel__URL__(\"warrior.80ba110f.png\").toString();","module.exports = new __parcel__URL__(\"Slash.0d282c12.png\").toString();","module.exports = new __parcel__URL__(\"Bash.1a78b3f2.png\").toString();","module.exports = new __parcel__URL__(\"Bonk.72d83ecb.png\").toString();","module.exports = new __parcel__URL__(\"smash.8dd9de83.png\").toString();","/*\r\n    Inlämningsuppgift 1 - FE23 Javascript 2\r\n    Kristoffer Bengtsson\r\n    Yasir Kakar\r\n\r\n    Class: FighterType -> Mage\r\n    Definition of stats and skills for a player of the mage class.\r\n*/\r\nimport FighterType from \"../FighterType.js\";\r\nimport AttackSkill from \"../AttackSkill.js\";\r\n\r\n// Images\r\nimport imgUrlMage from \"../../images/mage.png\";\r\nimport imgUrlSpellFrost from \"../../images/Rayoffrost.png\";\r\nimport imgUrlSpellFirebolt from '../../images/Ig-miss.png';\r\nimport imgUrlSpellLightning from '../../images/lightning.png';\r\nimport imgUrlSpellHeal from '../../images/heal.png';\r\n\r\nexport default class Mage extends FighterType {\r\n\r\n    constructor() {\r\n        // name, health, defense, color, icon\r\n        super('Wizard', 200, 3, \"fighterclass-mage\", imgUrlMage);\r\n\r\n        // Create unique skills for this fighter type\r\n        this.addSkill(new AttackSkill(\r\n            \"Ray of Frost\",\r\n            10, // min damage\r\n            15, // max damage\r\n            15, // attack bonus\r\n            -1, // uses per match (-1 = unlimited)\r\n            \"enemy\", // target\r\n            \"none\", // status effect\r\n            imgUrlSpellFrost, // icon\r\n            'Freeze opponent with a ray of frost doing 10-15 damage. (+15 attack)'\r\n        ));\r\n\r\n        this.addSkill(new AttackSkill(\r\n            \"Ig-miss\",\r\n            35,  // min damage\r\n            40, // max damage\r\n            10, // attack bonus\r\n            6,  // uses per match\r\n            \"enemy\",  // target\r\n            \"burn|3\", // status effect | duration (damage over time)\r\n            imgUrlSpellFirebolt, // icon\r\n            'Attempt to scorch opponent for 35-40 damage with a firebolt, burning for 10 damage over 3 rounds. (+5 attack)'\r\n        ));\r\n\r\n        this.addSkill(new AttackSkill(\r\n            \"Lightning\",\r\n            50, // min damage\r\n            60, // max damage\r\n            10, // attack bonus\r\n            3,  // uses per match\r\n            \"enemy\", // target\r\n            \"stun|1\", // status effect | duration (skip turn)\r\n            imgUrlSpellLightning, // icon\r\n            'Electrocute opponent with a lightning bolt for 50-60 damage, stunning for 1 round. (+10 attack)'\r\n        ));\r\n\r\n        this.addSkill(new AttackSkill(\r\n            \"Heal\",\r\n            50, // min damage\r\n            50, // max damage\r\n            10, // attack bonus\r\n            3, // uses per match\r\n            \"self\", // target\r\n            \"cure\", // status effect (instant, heal + cure burning)\r\n            imgUrlSpellHeal, // icon\r\n            'Heal yourself for 50 health and cure burning.'\r\n        ));\r\n    }\r\n}","module.exports = new __parcel__URL__(\"mage.13131773.png\").toString();","module.exports = new __parcel__URL__(\"Rayoffrost.e225c5f0.png\").toString();","module.exports = new __parcel__URL__(\"Ig-miss.52bd7018.png\").toString();","module.exports = new __parcel__URL__(\"lightning.10a957d3.png\").toString();","module.exports = new __parcel__URL__(\"heal.e56e2835.png\").toString();","module.exports = new __parcel__URL__(\"archerright.43c66f17.png\").toString();","module.exports = new __parcel__URL__(\"archerleft.431eb79a.png\").toString();"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","$31b25da2f4a4d446$export$a45229d174408848","elementType","elementText","parentElement","cssClass","attributes","allowHTML","selector","$31b25da2f4a4d446$export$4681d16351dbb61","$31b25da2f4a4d446$export$a6f905893761824c","id","$31b25da2f4a4d446$export$7d558e3702f02251","join","targetElement","querySelector","listItemText","innerHTML","newListItem","document","createElement","$31b25da2f4a4d446$export$375d3942de154e76","appendChild","$31b25da2f4a4d446$export$ab2fe02786cfa43c","elementClass","elementAttributes","newElement","toLowerCase","attributeName","setAttribute","classesToAdd","length","Array","isArray","classList","add","optionItemText","optValue","optLabel","optGroup","split","newOptionItem","value","undefined","optionGroup","label","alt","actualNewElement","newElementLabel","getAttribute","append","element","content","innerText","text","lengthLimit","arr","obj","requiredProperties","Object","keys","exports","init","module","call","err","Error","code","register","parcelRegister","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","path","URL","url","toString","JSON","parse","$bdc24d20efe2218e$export$2e2bcd8739ae039","statusEffects","skillName","skillDamageMin","skillDamageMax","skillUses","skillTarget","skillHitChance","skillIcon","skillDescription","skillStatus","skillStatusDuration","constructor","name","damageMin","damageMax","hitChance","charges","target","statusEffect","icon","description","statusEffectType","statusEffectDuration","includes","Math","max","min","minDamage","maxDamage","uses","status","statusDuration","use","opponent","skillUser","skillRoll","round","random","heal","$70a8fd96a77f4374$export$2e2bcd8739ae039","showMessage","removeStatusEffect","addStatusEffect","attackRoll","rollDice","defenseRoll","armor","takeDamage","hasStatusEffect","sides","modifier","ceil","$f2151051f06bd209$export$2e2bcd8739ae039","fighterName","maxHealth","armorClass","attackTypes","classStyle","classIcon","style","addSkill","attackType","push","getAttackSkill","skill","getAvailableSkills","filter","$0b08f7e0ded088ea$export$2e2bcd8739ae039","effectType","effectDuration","effectTarget","duration","showFeedback","effectName","getEffectName","turnProc","expireMessage","$c5c895184b095f06$export$2e2bcd8739ae039","playerId","playerName","currentHealth","fighterType","combatRound","newID","newName","health","type","incrementRound","damageAmount","parseInt","healAmount","removeCount","updatedStatusList","getStatusEffects","statusList","updateStatusEffects","useSkill","attackSkill","opponentPlayer","skillObj","roll","$9671fb645043bee3$export$2e2bcd8739ae039","gameRound","currentPlayer","playerOne","playerTwo","player1","player2","setPlayerColor","player","nextPlayerTurn","checkForGameOver","setCurrentPlayer","buildPlayerAvatar","doGameOver","winner","loser","showGameOverScreen","outputElement","getPlayerElement","src","buildSkillButtons","buttonWrapper","playerSkills","buttonContainer","addEventListener","event","preventDefault","usedSkill","submitter","skillResult","showPlayerMove","disabled","buttonId","replaceAll","skillname","$f9a6e3a1144815c5$exports","$1fc58a0afe1e72af$exports","$2e670a262a06ebba$exports","$dc09a6f8c8add74b$exports","$4f7acee141176343$exports","$c6b4512f0e8a72f5$export$2e2bcd8739ae039","$6d7ce8bbb7925143$exports","$eca931ac28e7e465$exports","$02a717f98ddc67da$exports","$5c8f4a440fc73749$exports","$97f6336e7d8b2cfb$exports","$d51fd8bc5f27a2d0$export$2e2bcd8739ae039","$fe0bd94cadab826a$exports","$f21115f4243e71cb$exports","$8b4a35d0a8c455e6$exports","$3be5bf08676dfafc$exports","$b6b8815555194c56$exports","$8296058d3c480b30$export$2e2bcd8739ae039","$089d7c0f682e5855$exports","$8db4d3a4ecc9a9a5$exports","game","messagesElement","errorsElement","playerElements","playerIndicator","startGame","createPlayerType","typeName","playerNumber","remove","playerStyle","playerIdx","messageText","prepend","showError","errorText","errorMsg","setTimeout","children","querySelectorAll","forEach","buttonPanel","winnerName","gameoverBox","body","restartButton","close","newGame","endButton","showModal","newPlayersForm","newPlayersWrapper","buttonsWrapper","createNewPlayerBox","onNewPlayersSubmit","bind","playerNum","newPlayerBox","minlength","maxlength","required","for","checked","trim","error","console"],"version":3,"file":"index.d2df16bf.js.map"}